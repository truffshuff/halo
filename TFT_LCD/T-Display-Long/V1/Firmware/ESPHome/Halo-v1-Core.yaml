#Define Project
substitutions:
  name: halo
  version: "25.10.24.1423"
  device_description: ${name} - v${version}.

psram:
  mode: octal
  # speed: 120MHz

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  cpu_frequency: 240MHz
  
  framework:
    type: esp-idf
    advanced:
      enable_idf_experimental_features: true
    # platform_version: 6.9.0
    # version: 5.3.1

# esp32_improv:
#   authorizer: none

# Temporarily disabled to prevent heap exhaustion and malloc failures
esp32_ble_tracker:
  id: ble_tracker
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true
    continuous: false

bluetooth_proxy:
  active: true
  connection_slots: 1  # Reduced from 3 to 1 to lower BLE memory usage

external_components:
  - source: github://truffshuff/esphome-components
    components: [axs15231, sy6970]

  - source: github://pr#7770 # RMT driver, remove rmt_channel when using esp-idf
    components: [ remote_base, remote_receiver, remote_transmitter, esp32_rmt, esp32_rmt_led_strip ]
    refresh: 0s


spi:
  id: lily_spi
  type: quad
  clk_pin: 17
  data_pins:
    - 13
    - 18
    - 21
    - 14

captive_portal:

logger:
  level: INFO

globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: temp_unit_changed
    type: bool
    initial_value: "true"
  - id: last_touch_time
    type: int
    initial_value: '0'
  - id: auto_page_rotation_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: auto_page_rotation_interval
    type: int
    restore_value: yes
    initial_value: '30'  # Default 30 seconds
  - id: last_auto_rotation_time
    type: unsigned long
    restore_value: no
    initial_value: '0'
  # Page rotation settings - which pages are included
  - id: page_rotation_AirQ_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: page_rotation_wifi_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: page_rotation_weather_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: page_rotation_daily_forecast_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: page_rotation_hourly_forecast_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: page_rotation_vertical_clock_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  # Page rotation order (1-5, 0 means disabled)
  - id: page_rotation_AirQ_order
    type: int
    restore_value: yes
    initial_value: '1'
  - id: page_rotation_wifi_order
    type: int
    restore_value: yes
    initial_value: '2'
  - id: page_rotation_weather_order
    type: int
    restore_value: yes
    initial_value: '3'
  - id: page_rotation_daily_forecast_order
    type: int
    restore_value: yes
    initial_value: '4'
  - id: page_rotation_hourly_forecast_order
    type: int
    restore_value: yes
    initial_value: '5'
  - id: page_rotation_vertical_clock_order
    type: int
    restore_value: yes
    initial_value: '6'
  - id: default_page_index
    type: int
    restore_value: yes
    initial_value: '0'
  - id: current_page_index
    type: int
    restore_value: no
    initial_value: '0'
  - id: boot_complete
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: ota_in_progress
    type: bool
    restore_value: no
    initial_value: 'false'  # Set to true during OTA or other critical operations
  - id: time_update_last_started
    type: int
    restore_value: no
    initial_value: '0'
  - id: time_update_last_duration
    type: int
    restore_value: no
    initial_value: '0'
  - id: time_update_last_text
    type: std::string
    restore_value: no
    initial_value: ""
  - id: time_update_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: colon_blink_state
    type: bool
    restore_value: no
    initial_value: 'true'
  - id: weather_last_started
    type: int
    restore_value: no
    initial_value: '0'
  - id: weather_last_duration
    type: int
    restore_value: no
    initial_value: '0'
  - id: weather_last_condition
    type: std::string
    restore_value: no
    initial_value: ""
  - id: weather_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: display_backlight_is_on
    type: bool
    restore_value: no
    initial_value: 'true'
  - id: wifi_stat_connected_state
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wifi_logo_visible
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wifi_signal_last_text
    type: std::string
    restore_value: no
    initial_value: ""
  - id: wifi_signal_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wifi_signal_bar_last_value
    type: float
    restore_value: no
    initial_value: '-200.0'
  - id: wifi_signal_bar_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wifi_ssid_last_text
    type: std::string
    restore_value: no
    initial_value: ""
  - id: wifi_ssid_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wifi_ip_last_text
    type: std::string
    restore_value: no
    initial_value: ""
  - id: wifi_ip_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wg_status_last_text
    type: std::string
    restore_value: no
    initial_value: ""
  - id: wg_status_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wg_status_connected_state
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wg_status_color_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wg_address_last_text
    type: std::string
    restore_value: no
    initial_value: ""
  - id: wg_address_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wg_handshake_last_text
    type: std::string
    restore_value: no
    initial_value: ""
  - id: wg_handshake_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wg_endpoint_initialized
    type: bool
    restore_value: no
    initial_value: 'false'
  # Sensor UI update batching
  - id: sensor_ui_dirty
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: last_sensor_ui_update
    type: uint32_t
    restore_value: no
    initial_value: '0'

switch:
  - platform: template
    name: "Auto Page Rotation"
    id: auto_page_rotation
    icon: mdi:rotate-3d-variant
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - lambda: 'id(auto_page_rotation_enabled) = true;'
      - logger.log: "Auto page rotation enabled"
    on_turn_off:
      - lambda: 'id(auto_page_rotation_enabled) = false;'
      - logger.log: "Auto page rotation disabled"
  - platform: template
    name: "Startup Light Blink"
    id: startup_light_blink
    icon: mdi:lightbulb
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
  - platform: template
    name: "24h Clock Format"
    id: time_format
    icon: mdi:clock-digital
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    entity_category: "config"
  - platform: template
    name: "Clock Colon Blink"
    id: colon_blink_enabled
    icon: mdi:timer-outline
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
  - platform: template
    name: "Enable WireGuard"
    id: wireguard_enabled
    icon: mdi:vpn
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - logger.log: "Switching to SNTP time source for WireGuard"
      - script.execute: time_update  # Switch to SNTP time display
      - delay: 500ms  # Brief delay to ensure SNTP is being used
      - wireguard.enable:
          id: wg0
      - logger.log: "WireGuard enabled"
    on_turn_off:
      - wireguard.disable:
          id: wg0
      - logger.log: "WireGuard disabled - switching to Home Assistant time source"
      - script.execute: time_update  # Switch to HA time display

  # Page rotation selection switches
  - platform: template
    name: "Page Rotation: AirQ Page"
    id: page_rotation_AirQ_switch
    icon: mdi:view-dashboard
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - lambda: 'id(page_rotation_AirQ_enabled) = true;'
      - logger.log: "AirQ page enabled in rotation"
    on_turn_off:
      - lambda: 'id(page_rotation_AirQ_enabled) = false;'
      - logger.log: "AirQ page disabled in rotation"

  - platform: template
    name: "Page Rotation: WiFi Page"
    id: page_rotation_wifi_switch
    icon: mdi:wifi
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - lambda: 'id(page_rotation_wifi_enabled) = true;'
      - logger.log: "WiFi page enabled in rotation"
    on_turn_off:
      - lambda: 'id(page_rotation_wifi_enabled) = false;'
      - logger.log: "WiFi page disabled in rotation"

  - platform: template
    name: "Page Rotation: Weather Page"
    id: page_rotation_weather_switch
    icon: mdi:weather-partly-cloudy
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - lambda: 'id(page_rotation_weather_enabled) = true;'
      - logger.log: "Weather page enabled in rotation"
    on_turn_off:
      - lambda: 'id(page_rotation_weather_enabled) = false;'
      - logger.log: "Weather page disabled in rotation"

  - platform: template
    name: "Page Rotation: Daily Forecast Page"
    id: page_rotation_daily_forecast_switch
    icon: mdi:calendar-today
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - lambda: 'id(page_rotation_daily_forecast_enabled) = true;'
      - logger.log: "Daily forecast page enabled in rotation"
    on_turn_off:
      - lambda: 'id(page_rotation_daily_forecast_enabled) = false;'
      - logger.log: "Daily forecast page disabled in rotation"

  - platform: template
    name: "Page Rotation: Hourly Forecast Page"
    id: page_rotation_hourly_forecast_switch
    icon: mdi:clock-time-eight-outline
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - lambda: 'id(page_rotation_hourly_forecast_enabled) = true;'
      - logger.log: "Hourly forecast page enabled in rotation"
    on_turn_off:
      - lambda: 'id(page_rotation_hourly_forecast_enabled) = false;'
      - logger.log: "Hourly forecast page disabled in rotation"

  - platform: template
    name: "Page Rotation: Vertical Clock Page"
    id: page_rotation_vertical_clock_switch
    icon: mdi:clock-outline
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - lambda: 'id(page_rotation_vertical_clock_enabled) = true;'
      - logger.log: "Vertical clock page enabled in rotation"
    on_turn_off:
      - lambda: 'id(page_rotation_vertical_clock_enabled) = false;'
      - logger.log: "Vertical clock page disabled in rotation"

select:
  - platform: template
    name: Display Temperature Unit
    id: display_temperature_unit
    entity_category: "Config"
    options:
     - "Fahrenheit"
     - "Celsius"
     - "Kelvin"
    initial_option: "Fahrenheit"
    restore_value: true
    optimistic: true
    on_value:
      - globals.set:
          id: temp_unit_changed
          value: "true"

  - platform: template
    name: LED Effect
    id: led_effect_select
    entity_category: "Config"
    options:
      - "None"
      - "Rainbow Effect With Custom Values"
      - "Addressable Rainbow"
      - "Color Wipe"
      - "Scan"
      - "Twinkle"
      - "Fireworks"
      - "Strobe"
      - "Random Twinkle"
      - "AQI Color"
      - "Weather Condition"
      - "Auto Context"
    initial_option: "None"
    restore_value: true
    optimistic: true
    on_value:
      - lambda: |-
          // Don't apply effects during boot - let startup_light_blink handle it
          if (!id(boot_complete)) return;

          std::string effect = id(led_effect_select).state;
          if (effect == "None") {
            auto call = id(rgb_light).turn_off();
            call.perform();
          } else if (effect == "AQI Color") {
            float aqi = id(computed_halo_aqi).state;
            if (std::isnan(aqi) || aqi <= 50) {
              auto call = id(rgb_light).turn_off();
              call.perform();
            } else {
              Color color;
              if (aqi <= 100) color = Color(255, 255, 0); // yellow
              else if (aqi <= 150) color = Color(255, 165, 0); // orange
              else if (aqi <= 200) color = Color(255, 0, 0); // red
              else if (aqi <= 300) color = Color(128, 0, 128); // purple
              else color = Color(128, 0, 0); // maroon
              auto call = id(rgb_light).turn_on();
              call.set_rgb(color.red / 255.0f, color.green / 255.0f, color.blue / 255.0f);
              call.perform();
            }
          } else if (effect == "Weather Condition" || effect == "Auto Context") {
            // New lambda effects - activate them
            auto call = id(rgb_light).turn_on();
            call.set_effect(effect);
            call.perform();
          } else {
            auto call = id(rgb_light).turn_on();
            call.set_effect(effect);
            call.perform();
          }

  - platform: template
    name: Default Page
    id: default_page_select_boot
    entity_category: "config"
    options:
      - "Vertical Clock"
      - "AirQ"
      - "WiFi"
      - "Weather"
      - "Daily Forecast"
      - "Hourly Forecast"
    initial_option: "Vertical Clock"
    restore_value: true
    optimistic: true
    on_value:
      - lambda: |-
          int idx = 0;
          const std::string &choice = id(default_page_select_boot).state;
          if (choice == "WiFi") idx = 1;
          else if (choice == "Weather") idx = 2;
          else if (choice == "Daily Forecast") idx = 3;
          else if (choice == "Hourly Forecast") idx = 4;
          else if (choice == "Vertical Clock") idx = 0;
          id(default_page_index) = idx;

interval:
  - interval: 5s  # Reduced from 15s for faster WiFi status updates on AirQ page
    then:
      - if:
          condition:
            lambda: 'return id(boot_complete);'
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        lambda: 'return !id(wifi_stat_connected_state) && id(current_page_index) == 1;'  # AirQ_page
                      then:
                        - lvgl.widget.update:
                            id: wifi_stat
                            text_color: my_green
                  - if:
                      condition:
                        lambda: 'return !id(wifi_stat_connected_state);'
                      then:
                        - lambda: 'id(wifi_stat_connected_state) = true;'
                  - if:
                      condition:
                        lambda: 'return !id(wifi_logo_visible) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.widget.show:
                            id: ym_image
                  - if:
                      condition:
                        lambda: 'return !id(wifi_logo_visible);'
                      then:
                        - lambda: 'id(wifi_logo_visible) = true;'
                  - lambda: |-
                      char buffer[32];
                      snprintf(buffer, sizeof(buffer), "Signal: %.0f dBm", id(wifi_signal_db).state);
                      std::string new_text(buffer);
                      if (new_text != id(wifi_signal_last_text)) {
                        id(wifi_signal_last_text) = new_text;
                        id(wifi_signal_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(wifi_signal_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.label.update:
                            id: wifi_signal_label
                            text: !lambda 'return id(wifi_signal_last_text);'
                        - lambda: 'id(wifi_signal_needs_render) = false;'
            - lambda: |-
                float signal = id(wifi_signal_db).state;
                if (std::isnan(signal)) {
                  signal = -200.0f;
                }
                if (signal != id(wifi_signal_bar_last_value)) {
                  id(wifi_signal_bar_last_value) = signal;
                  id(wifi_signal_bar_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wifi_signal_bar_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.bar.update:
                      id: wifi_signal_bar
                      value: !lambda 'return id(wifi_signal_bar_last_value);'
                  - lambda: 'id(wifi_signal_bar_needs_render) = false;'
            - lambda: |-
                std::string ssid = esphome::wifi::global_wifi_component->wifi_ssid();
                std::string new_text = std::string("SSID: ") + ssid;
                if (new_text != id(wifi_ssid_last_text)) {
                  id(wifi_ssid_last_text) = new_text;
                  id(wifi_ssid_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wifi_ssid_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wifi_ssid_label
                      text: !lambda 'return id(wifi_ssid_last_text);'
                  - lambda: 'id(wifi_ssid_needs_render) = false;'
            - lambda: |-
                auto addresses = esphome::wifi::global_wifi_component->get_ip_addresses();
                std::string ip_text = "IP: Not assigned";
                if (!addresses.empty()) {
                  ip_text = std::string("IP: ") + addresses[0].str();
                }
                if (ip_text != id(wifi_ip_last_text)) {
                  id(wifi_ip_last_text) = ip_text;
                  id(wifi_ip_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wifi_ip_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wifi_ip_label
                      text: !lambda 'return id(wifi_ip_last_text);'
                  - lambda: 'id(wifi_ip_needs_render) = false;'
            - lambda: |-
                bool wg_connected = id(wireguard_status).state;
                std::string new_text = wg_connected ? "Status: \nConnected" : "Status: \nDisconnected";
                if (new_text != id(wg_status_last_text)) {
                  id(wg_status_last_text) = new_text;
                  id(wg_status_needs_render) = true;
                }
                if (wg_connected != id(wg_status_connected_state)) {
                  id(wg_status_connected_state) = wg_connected;
                  id(wg_status_color_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wg_status_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wg_status_label
                      text: !lambda 'return id(wg_status_last_text);'
                  - lambda: 'id(wg_status_needs_render) = false;'
            - if:
                condition:
                  lambda: 'return id(wg_status_color_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.widget.update:
                      id: wg_status_label
                      text_color: !lambda |-
                        if (id(wg_status_connected_state)) {
                          return id(my_green);
                        } else {
                          return id(my_gray);
                        }
                  - lambda: 'id(wg_status_color_needs_render) = false;'
            - lambda: |-
                std::string new_text = "VPN IP: Not configured";
                if (id(wireguard_address_text).has_state()) {
                  new_text = std::string("VPN IP: ") + id(wireguard_address_text).state;
                }
                if (new_text != id(wg_address_last_text)) {
                  id(wg_address_last_text) = new_text;
                  id(wg_address_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wg_address_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wg_address_label
                      text: !lambda 'return id(wg_address_last_text);'
                  - lambda: 'id(wg_address_needs_render) = false;'
            - if:
                condition:
                  lambda: 'return !id(wg_endpoint_initialized) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wg_endpoint_label
                      text: "Endpoint: \nConfigured"
                  - lambda: 'id(wg_endpoint_initialized) = true;'
            - lambda: |-
                std::string handshake_text;
                if (!std::isnan(id(wireguard_handshake).state)) {
                  const auto current_time = id(sntp_time).now();
                  if (current_time.is_valid()) {
                    int seconds_ago = current_time.timestamp - static_cast<int>(id(wireguard_handshake).state);
                    auto handshake_time = ESPTime::from_epoch_local(static_cast<int>(id(wireguard_handshake).state));
                    char time_ago[32];
                    if (seconds_ago < 0) {
                      snprintf(time_ago, sizeof(time_ago), "%ds", static_cast<int>(id(wireguard_handshake).state));
                    } else if (seconds_ago < 60) {
                      snprintf(time_ago, sizeof(time_ago), "%ds ago", seconds_ago);
                    } else if (seconds_ago < 3600) {
                      snprintf(time_ago, sizeof(time_ago), "%dm ago", seconds_ago / 60);
                    } else if (seconds_ago < 86400) {
                      snprintf(time_ago, sizeof(time_ago), "%dh ago", seconds_ago / 3600);
                    } else {
                      snprintf(time_ago, sizeof(time_ago), "%dd ago", seconds_ago / 86400);
                    }
                    char buffer[128];
                    snprintf(buffer, sizeof(buffer), "Handshake: \n%s @\n\n%02d:%02d:%02d",
                             time_ago, handshake_time.hour, handshake_time.minute, handshake_time.second);
                    handshake_text = buffer;
                  } else {
                    handshake_text = "Handshake: \nUnknown";
                  }
                } else {
                  handshake_text = "Handshake: \nNever";
                }
                if (handshake_text != id(wg_handshake_last_text)) {
                  id(wg_handshake_last_text) = handshake_text;
                  id(wg_handshake_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wg_handshake_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wg_handshake_label
                      text: !lambda 'return id(wg_handshake_last_text);'
                  - lambda: 'id(wg_handshake_needs_render) = false;'
          else:
            - if:
                condition:
                  lambda: 'return id(wifi_stat_connected_state) && id(current_page_index) == 1;'  # AirQ_page
                then:
                  - lvgl.widget.update:
                      id: wifi_stat
                      text_color: my_red
            - lambda: 'id(wifi_stat_connected_state) = false;'
            - if:
                condition:
                  lambda: 'return id(wifi_logo_visible) && id(current_page_index) == 1;'  # AirQ_page
                then:
                  - lvgl.widget.hide:
                      id: ym_image
            - if:
                condition:
                  lambda: 'return id(wifi_logo_visible);'
                then:
                  - lambda: 'id(wifi_logo_visible) = false;'
            - lambda: |-
                const std::string new_text = "Signal: --";
                if (new_text != id(wifi_signal_last_text)) {
                  id(wifi_signal_last_text) = new_text;
                  id(wifi_signal_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wifi_signal_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wifi_signal_label
                      text: !lambda 'return id(wifi_signal_last_text);'
                  - lambda: 'id(wifi_signal_needs_render) = false;'
            - lambda: |-
                float new_value = -200.0f;
                if (new_value != id(wifi_signal_bar_last_value)) {
                  id(wifi_signal_bar_last_value) = new_value;
                  id(wifi_signal_bar_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wifi_signal_bar_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.bar.update:
                      id: wifi_signal_bar
                      value: !lambda 'return id(wifi_signal_bar_last_value);'
                  - lambda: 'id(wifi_signal_bar_needs_render) = false;'
            - lambda: |-
                const std::string ssid_text = "SSID: Not connected";
                if (ssid_text != id(wifi_ssid_last_text)) {
                  id(wifi_ssid_last_text) = ssid_text;
                  id(wifi_ssid_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wifi_ssid_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wifi_ssid_label
                      text: !lambda 'return id(wifi_ssid_last_text);'
                  - lambda: 'id(wifi_ssid_needs_render) = false;'
            - lambda: |-
                const std::string ip_text = "IP: Not connected";
                if (ip_text != id(wifi_ip_last_text)) {
                  id(wifi_ip_last_text) = ip_text;
                  id(wifi_ip_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wifi_ip_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wifi_ip_label
                      text: !lambda 'return id(wifi_ip_last_text);'
                  - lambda: 'id(wifi_ip_needs_render) = false;'
            - lambda: |-
                const bool wg_connected = false;
                const std::string status_text = "Status: \nDisconnected";
                if (status_text != id(wg_status_last_text)) {
                  id(wg_status_last_text) = status_text;
                  id(wg_status_needs_render) = true;
                }
                if (wg_connected != id(wg_status_connected_state)) {
                  id(wg_status_connected_state) = wg_connected;
                  id(wg_status_color_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wg_status_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wg_status_label
                      text: !lambda 'return id(wg_status_last_text);'
                  - lambda: 'id(wg_status_needs_render) = false;'
            - if:
                condition:
                  lambda: 'return id(wg_status_color_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.widget.update:
                      id: wg_status_label
                      text_color: !lambda 'return id(my_gray);'
                  - lambda: 'id(wg_status_color_needs_render) = false;'
            - lambda: |-
                const std::string address_text = "VPN IP: Not configured";
                if (address_text != id(wg_address_last_text)) {
                  id(wg_address_last_text) = address_text;
                  id(wg_address_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wg_address_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wg_address_label
                      text: !lambda 'return id(wg_address_last_text);'
                  - lambda: 'id(wg_address_needs_render) = false;'
            - lambda: |-
                const std::string handshake_text = "Handshake: \nUnavailable";
                if (handshake_text != id(wg_handshake_last_text)) {
                  id(wg_handshake_last_text) = handshake_text;
                  id(wg_handshake_needs_render) = true;
                }
            - if:
                condition:
                  lambda: 'return id(wg_handshake_needs_render) && id(current_page_index) == 2;'  # wifi_page
                then:
                  - lvgl.label.update:
                      id: wg_handshake_label
                      text: !lambda 'return id(wg_handshake_last_text);'
                  - lambda: 'id(wg_handshake_needs_render) = false;'

  - interval: 3s  # Reduced from 1s to decrease SPI bus contention
    then:
      - if:
          condition:
            lambda: 'return id(boot_complete);'
          then:
            - script.execute: time_update

  - interval: 1s
    then:
      - if:
          condition:
            lambda: 'return id(boot_complete) && id(current_page_index) == 0;'  # vertical_clock_page
          then:
            - lambda: |-
                if (id(colon_blink_enabled).state) {
                  id(colon_blink_state) = !id(colon_blink_state);
                } else if (!id(colon_blink_state)) {
                  id(colon_blink_state) = true;
                }
            - script.execute: update_colon_widget

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) < 30;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_on:
                id: rgb_light
                effect: "Addressable Rainbow"
            - lambda: 'id(cycleCounter) += 1;'

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) > 30;'
            - lambda: 'return id(cycleCounter) < 31;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_off:
                id: rgb_light
            - lambda: 'id(cycleCounter) += 1;'

  - interval: 30s
    then:
      - if:
          condition:
            and:
              - lambda: 'return id(current_page_index) == 3;'  # weather_forecast_page
              - not:
                  - script.is_running: update_weather_icon_color
          then:
            - script.execute: update_weather_icon_color

  # Batched sensor UI update - prevents LVGL cascade rendering
  - interval: 2s
    then:
      - lambda: |-
          // Only update if sensors changed since last batch
          if (id(sensor_ui_dirty)) {
            const uint32_t now = millis();
            // Ensure minimum 2s between UI refreshes
            if ((now - id(last_sensor_ui_update)) >= 2000) {
              ESP_LOGD("sensor_batch", "Batched sensor UI update triggered");
              id(sensor_ui_dirty) = false;
              id(last_sensor_ui_update) = now;
            }
          }

  # Automatic page rotation - controllable via Home Assistant with custom page selection and order
  - interval: 1s
    then:
      - if:
          condition:
            lambda: |-
              if (!id(boot_complete)) return false;
              // Only rotate if auto rotation is enabled
              if (!id(auto_page_rotation_enabled)) return false;

              const uint32_t now = millis();
              const uint32_t interval_ms = id(auto_page_rotation_interval) * 1000;

              // Check if enough time has passed since last rotation
              if ((now - id(last_auto_rotation_time)) < interval_ms) return false;

              // Build separate parallel arrays for page info
              std::vector<int> page_orders;
              std::vector<int> page_indices;  // Maps to the page in sorted order

              // Collect enabled pages with their orders (use index to identify page)
              // Index: 0=vertical_clock, 1=AirQ, 2=wifi, 3=weather, 4=hourly_forecast, 5=daily_forecast
              if (id(page_rotation_vertical_clock_enabled)) {
                page_orders.push_back(id(page_rotation_vertical_clock_order));
                page_indices.push_back(0);
              }
              if (id(page_rotation_AirQ_enabled)) {
                page_orders.push_back(id(page_rotation_AirQ_order));
                page_indices.push_back(1);
              }
              if (id(page_rotation_wifi_enabled)) {
                page_orders.push_back(id(page_rotation_wifi_order));
                page_indices.push_back(2);
              }
              if (id(page_rotation_weather_enabled)) {
                page_orders.push_back(id(page_rotation_weather_order));
                page_indices.push_back(3);
              }
              if (id(page_rotation_hourly_forecast_enabled)) {
                page_orders.push_back(id(page_rotation_hourly_forecast_order));
                page_indices.push_back(4);
              }
              if (id(page_rotation_daily_forecast_enabled)) {
                page_orders.push_back(id(page_rotation_daily_forecast_order));
                page_indices.push_back(5);
              }

              // If no pages are enabled, don't rotate
              if (page_orders.empty()) {
                ESP_LOGW("page_rotation", "No pages enabled for rotation");
                return false;
              }

              // Sort indices based on their order numbers (bubble sort for simplicity)
              for (size_t i = 0; i < page_orders.size(); i++) {
                for (size_t j = i + 1; j < page_orders.size(); j++) {
                  if (page_orders[j] < page_orders[i]) {
                    std::swap(page_orders[i], page_orders[j]);
                    std::swap(page_indices[i], page_indices[j]);
                  }
                }
              }

              // Use a static variable to track position in rotation sequence
              static int rotation_position = 0;

              // Make sure rotation_position is within bounds
              if (rotation_position >= page_indices.size()) {
                rotation_position = 0;
              }

              // Get the next page to show
              int next_page_id = page_indices[rotation_position];

              // Store the next page ID in current_page_index for the action to use
              id(current_page_index) = next_page_id;

              // Advance rotation position for next time (wrap around)
              rotation_position = (rotation_position + 1) % page_indices.size();

              // Show the next page
              ESP_LOGD("page_rotation", "Rotating to page index %d (order: %d)",
                       next_page_id, page_orders[rotation_position > 0 ? rotation_position - 1 : page_orders.size() - 1]);

              id(last_auto_rotation_time) = now;
              return true;
          then:
            - if:
                condition:
                  lambda: 'return id(current_page_index) == 0;'  # vertical_clock_page
                then:
                  - logger.log: "AUTO PAGE ROTATION -> Vertical Clock Page"
                  - lvgl.page.show:
                      id: vertical_clock_page
                      animation: OUT_LEFT
                      time: 300ms
                else:
                  - if:
                      condition:
                        lambda: 'return id(current_page_index) == 1;'  # AirQ_page
                      then:
                        - logger.log: "AUTO PAGE ROTATION -> AirQ Page"
                        - lvgl.page.show:
                            id: AirQ_page
                            animation: OUT_LEFT
                            time: 300ms
                      else:
                        - if:
                            condition:
                              lambda: 'return id(current_page_index) == 2;'  # wifi_page
                            then:
                              - logger.log: "AUTO PAGE ROTATION -> WiFi Page"
                              - lvgl.page.show:
                                  id: wifi_page
                                  animation: OUT_LEFT
                                  time: 300ms
                            else:
                              - if:
                                  condition:
                                    lambda: 'return id(current_page_index) == 3;'  # weather_forecast_page
                                  then:
                                    - logger.log: "AUTO PAGE ROTATION -> Weather Forecast Page"
                                    - lvgl.page.show:
                                        id: weather_forecast_page
                                        animation: OUT_LEFT
                                        time: 300ms
                                  else:
                                    - if:
                                        condition:
                                          lambda: 'return id(current_page_index) == 4;'  # hourly_forecast_page
                                        then:
                                          - logger.log: "AUTO PAGE ROTATION -> Hourly Forecast Page"
                                          - lvgl.page.show:
                                              id: hourly_forecast_page
                                              animation: OUT_LEFT
                                              time: 300ms
                                        else:
                                          - if:
                                              condition:
                                                lambda: 'return id(current_page_index) == 5;'  # daily_forecast_page
                                              then:
                                                - logger.log: "AUTO PAGE ROTATION -> Daily Forecast Page"
                                                - lvgl.page.show:
                                                    id: daily_forecast_page
                                                    animation: OUT_LEFT
                                                    time: 300ms
                                              else:
                                                - logger.log: "AUTO PAGE ROTATION -> Unknown page index, defaulting to Vertical Clock"
                                                - lvgl.page.show:
                                                    id: vertical_clock_page
                                                    animation: OUT_LEFT
                                                    time: 300ms

api:
  reboot_timeout: 0s  # Disable auto-reboot on API disconnect
  # Increase buffer sizes to handle sensor bursts
  # Default buffer is ~2KB, increase to 8KB
  # This prevents TCP buffer exhaustion during sensor cascades
  on_client_connected:
      - delay: 1s
      - lambda: 'id(cycleCounter) = 30;'
      - lambda: 'id(boot_complete) = true;'
      # Re-apply the saved LED effect selection after HA connects
      - delay: 2s
      - lambda: |-
          std::string effect = id(led_effect_select).state;
          if (effect == "None") {
            auto call = id(rgb_light).turn_off();
            call.perform();
          } else if (effect == "AQI Color") {
            float aqi = id(computed_halo_aqi).state;
            if (std::isnan(aqi) || aqi <= 50) {
              auto call = id(rgb_light).turn_off();
              call.perform();
            } else {
              Color color;
              if (aqi <= 100) color = Color(255, 255, 0);
              else if (aqi <= 150) color = Color(255, 165, 0);
              else if (aqi <= 200) color = Color(255, 0, 0);
              else if (aqi <= 300) color = Color(128, 0, 128);
              else color = Color(128, 0, 0);
              auto call = id(rgb_light).turn_on();
              call.set_rgb(color.red / 255.0f, color.green / 255.0f, color.blue / 255.0f);
              call.perform();
            }
          } else if (effect == "Weather Condition" || effect == "Auto Context") {
            // New lambda effects - activate them
            auto call = id(rgb_light).turn_on();
            call.set_effect(effect);
            call.perform();
          } else {
            auto call = id(rgb_light).turn_on();
            call.set_effect(effect);
            call.perform();
          }
      - delay: 500ms
      #BLE tracker disabled to prevent heap exhaustion
      - esp32_ble_tracker.start_scan:
          continuous: true
  on_client_disconnected:
      #BLE tracker disabled to prevent heap exhaustion
      - esp32_ble_tracker.stop_scan:
          
  services:
    #Co2 Calibration Service
    - service: calibrate_co2_value
      variables:
        co2_ppm: float
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda "return co2_ppm;"
            id: scd40
    - service: sen55_clean
      then:
        - sen5x.start_fan_autoclean: sen55
    - service: set_display_page
      variables:
        page_name: string
      then:
        - if:
            condition:
              lambda: 'return page_name == "AirQ" || page_name == "AirQ";'
            then:
              - lvgl.page.show: AirQ_page
            else:
              - if:
                  condition:
                    lambda: 'return page_name == "wifi" || page_name == "WiFi";'
                  then:
                    - lvgl.page.show: wifi_page
                  else:
                    - if:
                        condition:
                          lambda: 'return page_name == "weather" || page_name == "Weather";'
                        then:
                          - lvgl.page.show: weather_forecast_page
                        else:
                          - if:
                              condition:
                                lambda: 'return page_name == "daily" || page_name == "Daily";'
                              then:
                                - lvgl.page.show: daily_forecast_page
                              else:
                                - logger.log:
                                    format: "Unknown page requested: %s"
                                    args: ['page_name.c_str()']
                                    level: WARN

i2c:
  - sda: 9
    scl: 48
    id: lily_i2c
  - sda: 15
    scl: 10
    id: touch_i2c

output:
  - platform: ledc
    pin: 1
    id: backlight
    frequency: 100Hz  #Datasheet suggests low-frequency PWM. Should prevent stability issues.
    
# sy6970:
#   i2c_id: touch_i2c
#   state_led_enable: false  # To turn off the blinking green status LED

display:
  - platform: qspi_dbi
    id: lily_display
    model: AXS15231
    data_rate: 5MHz
    spi_id: lily_spi
    dimensions:
      height: 640
      width: 180
    cs_pin: 12
    reset_pin: 16
    rotation: 0
    auto_clear_enabled: false

# Touchscreen re-enabled with protective measures:
# - 100ms internal rate limiter in axs15231_touchscreen.cpp
# - Interrupt-only mode (no continuous polling)
# - 5s debounce to filter phantom touches
# - Coordinate validation to reject invalid touches
touchscreen:
  - platform: axs15231
    id: lily_touch
    display: lily_display
    i2c_id: touch_i2c
    interrupt_pin: GPIO11
    update_interval: never  # Interrupt-only mode - rely solely on hardware interrupts, no polling
    transform:
      mirror_x: false
      mirror_y: false
      swap_xy: false
    on_touch:
      - lambda: |-
          // Validate touch coordinates - filter out spurious/phantom touches
          if (touch.x < 0 || touch.x > 180 || touch.y < 0 || touch.y > 640) {
            ESP_LOGW("touch", "Invalid touch coordinates: x=%d, y=%d - ignoring", touch.x, touch.y);
            return;
          }
          ESP_LOGI("touch", "Touch at x=%d, y=%d", touch.x, touch.y);

          // Reset auto-rotation timer on any valid touch to prevent interruption during manual navigation
          id(last_auto_rotation_time) = millis();
          ESP_LOGD("touch", "Auto-rotation timer reset");

web_server:
  port: 80

wireguard:
  id: wg0
  address: !secret wg_address  # Your WireGuard interface IP address (e.g., 10.0.0.2)
  netmask: !secret wg_netmask  # Your WireGuard netmask (e.g., 255.255.255.0)
  private_key: !secret wg_prikey
  peer_port: !secret wg_peerport  # Your WireGuard private key
  peer_endpoint: !secret wg_peerendpt  # Your WireGuard server IP (e.g., 1.2.3.4)
  peer_public_key: !secret wg_pubkey  # Your WireGuard server public key
  peer_preshared_key: !secret wg_shrdkey  # Optional: Your WireGuard preshared key
  peer_allowed_ips:
    - 192.168.1.0/24
    - 10.6.0.1/32
    - 10.6.0.2/32
  peer_persistent_keepalive: 25s
  # Optional: Only route specific traffic through WireGuard
  # allowed_ips:
  #   - 10.0.0.0/24  # Only route WireGuard subnet traffic
  # If commented out, all traffic will be routed through WireGuard (0.0.0.0/0)

image:
  - file: https://yashmulgaonkar.github.io/assets/YM.png
    id: ym_logo
    resize: 25x25
    type: RGB565
    transparency: alpha_channel

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: my_orange
    red: 100%
    green: 50%
    blue: 0%
  - id: my_teal
    red: 0%
    green: 100%
    blue: 100%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%

time:
  - platform: homeassistant
    id: ha_time
    on_time_sync:
      - script.execute: time_update
  - platform: sntp
    id: sntp_time
    timezone: America/New_York
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time_sync:
      - script.execute: time_update

script:
  - id: page_transition_cleanup
    mode: queued  # Queue executions instead of warning about duplicates
    max_runs: 2   # Allow up to 2 queued runs
    then:
      - if:
          condition:
            lambda: 'return id(boot_complete) && !id(ota_in_progress);'
          then:
            - delay: 50ms  # Small delay to prevent rapid successive calls
            - lambda: |-
                // Safety check: Only run if LVGL is fully initialized
                lv_obj_t *scr = lv_scr_act();
                if (scr == NULL) {
                  return;  // Silently skip if not initialized
                }

                // Log current memory state before cleanup
                ESP_LOGD("lvgl", "Page transition cleanup - Free heap: %d", esp_get_free_heap_size());

                // Clear all cached strings to free memory
                id(time_update_last_text).clear();
                id(weather_last_condition).clear();

                // Force LVGL to invalidate current screen and redraw
                lv_obj_invalidate(scr);

                // Force immediate display flush to prevent buffer buildup
                lv_refr_now(NULL);

  - id: time_update
    mode: restart
    then:
      - lambda: |-
          id(time_update_last_started) = millis();
          id(time_update_needs_render) = false;
      - lambda: |-
          auto now = id(wireguard_enabled).state ? id(sntp_time).now() : id(ha_time).now();
          if (!now.is_valid()) {
            ESP_LOGW("time_update", "Time source unavailable, skipping label update");
            return;
          }
          bool is_pm = now.hour >= 12;
          int hour_12 = now.hour % 12;
          if (hour_12 == 0) {
            hour_12 = 12;
          }
          char time_buf[17];
          if (id(time_format).state) {
            snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
          } else {
            snprintf(time_buf, sizeof(time_buf), "%2d:%02d%s", hour_12, now.minute, is_pm ? "PM" : "AM");
          }
          std::string new_text(time_buf);
          if (new_text != id(time_update_last_text)) {
            id(time_update_last_text) = new_text;
            id(time_update_needs_render) = true;
          }
      - if:
          condition:
            lambda: 'return id(time_update_needs_render) && id(current_page_index) == 1;'  # AirQ_page
          then:
            - lvgl.label.update:
                id: timeVal
                text: !lambda 'return id(time_update_last_text);'
      - if:
          condition:
            lambda: 'return id(time_update_needs_render) && id(current_page_index) == 0;'  # vertical_clock_page
          then:
            - lvgl.label.update:
                id: vclock_hours
                text: !lambda |-
                  auto now = id(wireguard_enabled).state ? id(sntp_time).now() : id(ha_time).now();
                  if (!now.is_valid()) return std::string("--");
                  bool is_pm = now.hour >= 12;
                  int hour_12 = now.hour % 12;
                  if (hour_12 == 0) hour_12 = 12;
                  char buf[3];
                  if (id(time_format).state) {
                    snprintf(buf, sizeof(buf), "%02d", now.hour);
                  } else {
                    snprintf(buf, sizeof(buf), "%2d", hour_12);
                  }
                  return std::string(buf);
            - lvgl.label.update:
                id: vclock_minutes
                text: !lambda |-
                  auto now = id(wireguard_enabled).state ? id(sntp_time).now() : id(ha_time).now();
                  if (!now.is_valid()) return std::string("--");
                  char buf[3];
                  snprintf(buf, sizeof(buf), "%02d", now.minute);
                  return std::string(buf);
            - lvgl.label.update:
                id: vclock_ampm
                text: !lambda |-
                  auto now = id(wireguard_enabled).state ? id(sntp_time).now() : id(ha_time).now();
                  if (!now.is_valid()) return std::string("");
                  if (id(time_format).state) return std::string("");
                  bool is_pm = now.hour >= 12;
                  return std::string(is_pm ? "PM" : "AM");
            - lvgl.label.update:
                id: vclock_date
                text: !lambda |-
                  auto now = id(wireguard_enabled).state ? id(sntp_time).now() : id(ha_time).now();
                  if (!now.is_valid()) return std::string("--");
                  static const char* months[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
                  char buf[20];
                  snprintf(buf, sizeof(buf), "%s %d", months[now.month - 1], now.day_of_month);
                  return std::string(buf);
            - lvgl.label.update:
                id: vclock_day_top
                text: !lambda |-
                  auto now = id(wireguard_enabled).state ? id(sntp_time).now() : id(ha_time).now();
                  if (!now.is_valid()) return std::string("--");
                  static const char* days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
                  return std::string(days[now.day_of_week - 1]);
      - script.execute: update_colon_widget
      - lambda: |-
          const uint32_t elapsed = millis() - id(time_update_last_started);
          id(time_update_last_duration) = elapsed;
          // Removed publish_state to prevent TCP buffer overflow - store in global instead
          // id(time_update_duration_sensor).publish_state(elapsed);
          const bool rendered = id(time_update_needs_render);
          if (elapsed > 40) {
            ESP_LOGW("time_update", "time_update took %u ms (rendered=%s)", elapsed, rendered ? "true" : "false");
          } else {
            ESP_LOGD("time_update", "time_update took %u ms (rendered=%s)", elapsed, rendered ? "true" : "false");
          }
          id(time_update_needs_render) = false;
  - id: update_colon_widget
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return id(current_page_index) == 0;'  # vertical_clock_page
          then:
            - lvgl.widget.update:
                id: vclock_colon
                text_opa: !lambda |-
                  if (!id(colon_blink_enabled).state) {
                    if (!id(colon_blink_state)) {
                      id(colon_blink_state) = true;  // Keep colon visible when blinking disabled
                    }
                    return LV_OPA_COVER;
                  }
                  return id(colon_blink_state) ? LV_OPA_COVER : LV_OPA_TRANSP;
  - id: update_weather_icon_color
    mode: restart
    then:
      - lambda: |-
          id(weather_last_started) = millis();
          id(weather_needs_render) = false;
      - lambda: |-
          std::string condition = id(forecast_day1_condition).state;
          ESP_LOGD("weather_color", "Current condition: '%s'", condition.c_str());
          if (condition.empty()) {
            return;
          }
          std::string normalized = condition;
          std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
          if (normalized != id(weather_last_condition)) {
            id(weather_last_condition) = normalized;
            id(weather_needs_render) = true;
          }
      - if:
          condition:
            lambda: 'return id(weather_needs_render);'
          then:
            - lvgl.label.update:
                id: lbl_weather_forecast_condition_icon
                text_color: !lambda |-
                  const std::string condition = id(weather_last_condition);
                  ESP_LOGD("weather_color", "Applying color for condition: '%s'", condition.c_str());
                  if (condition.find("clear-night") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Slate Blue color (night)");
                    return lv_color_hex(0x6A5ACD);
                  } else if (condition.find("sunny") != std::string::npos || condition.find("clear") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Gold color");
                    return lv_color_hex(0xFFD700);
                  } else if (condition.find("snowy-rainy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Light Cyan color (mixed precipitation)");
                    return lv_color_hex(0xAFEEEE);
                  } else if (condition.find("lightning-rainy") != std::string::npos || condition.find("lightning") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Deep Pink color");
                    return lv_color_hex(0xFF1493);
                  } else if (condition.find("partlycloudy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Light Sky Blue color");
                    return lv_color_hex(0x87CEFA);
                  } else if (condition.find("cloudy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Dark Gray color");
                    return lv_color_hex(0xA9A9A9);
                  } else if (condition.find("rainy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Royal Blue color");
                    return lv_color_hex(0x4169E1);
                  } else if (condition.find("snowy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Gainsboro color");
                    return lv_color_hex(0xDCDCDC);
                  } else if (condition.find("fog") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Light Steel Blue color");
                    return lv_color_hex(0xB0C4DE);
                  } else if (condition.find("windy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Light Green color");
                    return lv_color_hex(0x90EE90);
                  } else {
                    ESP_LOGD("weather_color", "Setting White color (default)");
                    return lv_color_hex(0xFFFFFF);
                  }
      - lambda: |-
          const uint32_t elapsed = millis() - id(weather_last_started);
          id(weather_last_duration) = elapsed;
          // Removed publish_state to prevent TCP buffer overflow - store in global instead
          // id(weather_icon_duration_sensor).publish_state(elapsed);
          const bool rendered = id(weather_needs_render);
          if (elapsed > 80) {
            ESP_LOGW("weather_color", "update_weather_icon_color took %u ms (rendered=%s)", elapsed, rendered ? "true" : "false");
          } else {
            ESP_LOGD("weather_color", "update_weather_icon_color took %u ms (rendered=%s)", elapsed, rendered ? "true" : "false");
          }
          id(weather_needs_render) = false;

number:
  - platform: template
    name: "Auto Page Rotation Interval"
    id: page_rotation_interval
    icon: mdi:timer
    restore_value: true
    initial_value: 30
    min_value: 5
    max_value: 300
    entity_category: "config"
    unit_of_measurement: "s"
    optimistic: true
    step: 1
    mode: box
    on_value:
      - lambda: 'id(auto_page_rotation_interval) = (int)x;'
      - logger.log:
          format: "Page rotation interval changed to %d seconds"
          args: ['(int)x']

  # Page rotation order numbers (1-6, lower numbers show first)
  - platform: template
    name: "Page Order: AirQ Page"
    id: page_order_AirQ
    icon: mdi:numeric
    restore_value: true
    initial_value: 1
    min_value: 1
    max_value: 6
    entity_category: "config"
    optimistic: true
    step: 1
    mode: box
    on_value:
      - lambda: 'id(page_rotation_AirQ_order) = (int)x;'
      - logger.log:
          format: "AirQ page order set to %d"
          args: ['(int)x']

  - platform: template
    name: "Page Order: WiFi Page"
    id: page_order_wifi
    icon: mdi:numeric
    restore_value: true
    initial_value: 2
    min_value: 1
    max_value: 6
    entity_category: "config"
    optimistic: true
    step: 1
    mode: box
    on_value:
      - lambda: 'id(page_rotation_wifi_order) = (int)x;'
      - logger.log:
          format: "WiFi page order set to %d"
          args: ['(int)x']

  - platform: template
    name: "Page Order: Weather Page"
    id: page_order_weather
    icon: mdi:numeric
    restore_value: true
    initial_value: 3
    min_value: 1
    max_value: 6
    entity_category: "config"
    optimistic: true
    step: 1
    mode: box
    on_value:
      - lambda: 'id(page_rotation_weather_order) = (int)x;'
      - logger.log:
          format: "Weather page order set to %d"
          args: ['(int)x']

  - platform: template
    name: "Page Order: Daily Forecast Page"
    id: page_order_daily_forecast
    icon: mdi:numeric
    restore_value: true
    initial_value: 4
    min_value: 1
    max_value: 6
    entity_category: "config"
    optimistic: true
    step: 1
    mode: box
    on_value:
      - lambda: 'id(page_rotation_daily_forecast_order) = (int)x;'
      - logger.log:
          format: "Daily forecast page order set to %d"
          args: ['(int)x']

  - platform: template
    name: "Page Order: Hourly Forecast Page"
    id: page_order_hourly_forecast
    icon: mdi:numeric
    restore_value: true
    initial_value: 5
    min_value: 1
    max_value: 6
    entity_category: "config"
    optimistic: true
    step: 1
    mode: box
    on_value:
      - lambda: 'id(page_rotation_hourly_forecast_order) = (int)x;'
      - logger.log:
          format: "Hourly forecast page order set to %d"
          args: ['(int)x']

  - platform: template
    name: "Page Order: Vertical Clock Page"
    id: page_order_vertical_clock
    icon: mdi:numeric
    restore_value: true
    initial_value: 6
    min_value: 1
    max_value: 6
    entity_category: "config"
    optimistic: true
    step: 1
    mode: box
    on_value:
      - lambda: 'id(page_rotation_vertical_clock_order) = (int)x;'
      - logger.log:
          format: "Vertical clock page order set to %d"
          args: ['(int)x']

  - platform: template
    name: SEN55 Temperature Offset
    id: sen55_temperature_offset
    restore_value: true
    initial_value: 6.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
  - platform: template
    name: SEN55 Humidity Offset
    id: sen55_humidity_offset
    restore_value: true
    initial_value: 0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "%"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
  - platform: template
    name: "Weather Gauge Value"
    id: weather_gauge_value
    min_value: 0
    max_value: 100
    step: 1
    mode: box
    optimistic: true
    entity_category: config
    icon: mdi:gauge
    unit_of_measurement: "%"
    on_value:
      then:
        - lvgl.indicator.update:
            id: weather_temp_needle
            value: !lambda 'return (int)x;'

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: wireguard
    wireguard_id: wg0
    status:
      name: 'WireGuard Status'
      id: wireguard_status
  - platform: wireguard
    wireguard_id: wg0
    enabled:
      name: 'WireGuard Enabled'

  - platform: template
    name: "Display Backlight Active"
    id: display_backlight_state
    entity_category: "diagnostic"
    lambda: 'return id(display_backlight_is_on);'

sensor:
  - platform: template
    name: "Free Heap"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
    unit_of_measurement: "bytes"
    update_interval: 30s
    entity_category: "diagnostic"

  - platform: template
    name: "Largest Free Block"
    lambda: return heap_caps_get_largest_free_block(MALLOC_CAP_INTERNAL);
    unit_of_measurement: "bytes"
    update_interval: 30s
    entity_category: "diagnostic"

  - platform: template
    name: "Heap Fragmentation"
    lambda: |-
      size_t free_heap = heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
      size_t largest_block = heap_caps_get_largest_free_block(MALLOC_CAP_INTERNAL);
      if (free_heap > 0) {
        return ((float)(free_heap - largest_block) / free_heap) * 100.0;
      }
      return 0.0;
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 30s
    entity_category: "diagnostic"

  # DMA-capable memory monitoring
  - platform: template
    name: "DMA Capable Heap Free"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_DMA);
    unit_of_measurement: "bytes"
    update_interval: 30s
    entity_category: "diagnostic"

  - platform: template
    name: "DMA Capable Largest Block"
    lambda: return heap_caps_get_largest_free_block(MALLOC_CAP_DMA);
    unit_of_measurement: "bytes"
    update_interval: 30s
    entity_category: "diagnostic"

  # PSRAM monitoring (if available)
  - platform: template
    name: "PSRAM Free"
    lambda: |-
      size_t psram_free = heap_caps_get_free_size(MALLOC_CAP_SPIRAM);
      if (psram_free > 0) {
        return psram_free;
      }
      return 0;  // No PSRAM available
    unit_of_measurement: "bytes"
    update_interval: 30s
    entity_category: "diagnostic"

  # Total heap across all types
  - platform: template
    name: "Total Free Heap (All)"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_8BIT);
    unit_of_measurement: "bytes"
    update_interval: 30s
    entity_category: "diagnostic"

  # Minimum free heap since boot (indicates worst-case memory pressure)
  - platform: template
    name: "Min Free Heap Ever"
    lambda: return heap_caps_get_minimum_free_size(MALLOC_CAP_INTERNAL);
    unit_of_measurement: "bytes"
    update_interval: 30s
    entity_category: "diagnostic"

  # Display refresh rate monitor
  - platform: template
    name: "Display Refresh Count"
    id: display_refresh_counter
    internal: true
    update_interval: never
    entity_category: "diagnostic"

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: template
    name: "Time Update Duration"
    id: time_update_duration_sensor
    internal: true  # Don't send to Home Assistant - internal diagnostic only
    unit_of_measurement: "ms"
    accuracy_decimals: 0
    icon: "mdi:timer-outline"
    entity_category: "diagnostic"
    update_interval: never

  - platform: template
    name: "Weather Icon Update Duration"
    id: weather_icon_duration_sensor
    internal: true  # Don't send to Home Assistant - internal diagnostic only
    unit_of_measurement: "ms"
    accuracy_decimals: 0
    icon: "mdi:weather-lightning"
    entity_category: "diagnostic"
    update_interval: never

  - platform: wireguard
    wireguard_id: wg0
    latest_handshake:
      name: 'WireGuard Latest Handshake'
      id: wireguard_handshake

  - platform: template
    name: "Computed AQI"
    id: computed_halo_aqi
    unit_of_measurement: ""
    accuracy_decimals: 0
    device_class: "aqi"
    state_class: "measurement"
    update_interval: never  # We'll update it manually

  - platform: scd4x
    id: scd40
    co2:
      name: "CO2"
      id: "co2"
      filters:
        - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: co2_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 600;"
              then:
                - lvgl.label.update:
                    id: co2_value
                    text_color: my_green                     
              else:
                - if:
                    condition:
                      lambda: "return x <= 1000;"
                    then:
                      - lvgl.label.update:
                          id: co2_value
                          text_color: my_yellow                         
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 1500;"
                          then:
                            - lvgl.label.update:
                                id: co2_value
                                text_color: my_orange                                 
                          else:
                            - lvgl.label.update:
                                id: co2_value
                                text_color: my_red                                                                              
    automatic_self_calibration: false
    update_interval: 30s  # Increased from 10s to reduce I2C blocking frequency
    measurement_mode: "periodic"
    i2c_id: lily_i2c
    ambient_pressure_compensation_source: bme280pressure

  - platform: mics_4514
    id: mics4514
    nitrogen_dioxide:
      name: Nitrogen Dioxide
      id: "no2"
      filters:
      - offset: -0.16
      - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: no2_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.03;"  # Safe level typical indoors (ppm)
              then:
                - lvgl.label.update:
                    id: no2_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 0.06;"  # Slightly elevated level (ppm)
                    then:
                      - lvgl.label.update:
                          id: no2_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 0.1;"  # Moderately high level (ppm)
                          then:
                            - lvgl.label.update:
                                id: no2_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: no2_value
                                text_color: my_red  # High level, unsafe indoors (ppm)                          
    carbon_monoxide:
      name: Carbon Monoxide
      id: "co"
      filters:
        - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: co_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 15;"
              then:
                - lvgl.label.update:
                    id: co_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 30;"
                    then:
                      - lvgl.label.update:
                          id: co_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 36;"
                          then:
                            - lvgl.label.update:
                                id: co_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: co_value
                                text_color: my_red                      
    hydrogen:
      name: Hydrogen
      id: "h2"
      filters:
        - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: h2_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.4;"  # Safe level typical indoors
              then:
                - lvgl.label.update:
                    id: h2_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 1.0;"  # Slightly elevated level
                    then:
                      - lvgl.label.update:
                          id: h2_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 2.0;"  # Moderately high level
                          then:
                            - lvgl.label.update:
                                id: h2_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: h2_value
                                text_color: my_red  # High level, unsafe indoors                       
    methane:
      name: Methane
      id: "ch4"
      filters:
        - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: ch4_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 2.0;"  # Typical safe level
              then:
                - lvgl.label.update:
                    id: ch4_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 10.0;"  # Elevated but not critical
                    then:
                      - lvgl.label.update:
                          id: ch4_value
                          text_color: my_yellow
                    else:
                      - lvgl.label.update:
                          id: ch4_value
                          text_color: my_red  # Critical level                                        
    ethanol:
      name: Ethanol
      id: "ethanol"
      filters:
        - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: ethanol_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.5;"  # Safe level
              then:
                - lvgl.label.update:
                    id: ethanol_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 1.5;"  # Slightly elevated
                    then:
                      - lvgl.label.update:
                          id: ethanol_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 3.0;"  # Moderate level
                          then:
                            - lvgl.label.update:
                                id: ethanol_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: ethanol_value
                                text_color: my_red  # High level                       
    ammonia:
      name: Ammonia
      id: "nh3"
      filters:
        - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: nh3_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.5;"  # Safe level typical indoors
              then:
                - lvgl.label.update:
                    id: nh3_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 1.0;"  # Slightly elevated level
                    then:
                      - lvgl.label.update:
                          id: nh3_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 2.0;"  # Moderately high level
                          then:
                            - lvgl.label.update:
                                id: nh3_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: nh3_value
                                text_color: my_red  # High level, unsafe indoors                            
    update_interval: 40s  # Increased from 12s to reduce I2C blocking frequency
    i2c_id: lily_i2c
    address: 0x75

  - platform: bme280_i2c
    i2c_id: lily_i2c
    temperature:
      name: "BME280 Temperature"
      oversampling: 2x
      # filters:
      #   - lambda: |-
      #       return x;  
    pressure:
      name: "BME280 Pressure"
      id: bme280pressure
    humidity:
      name: "BME280 Humidity"    

  - platform: sen5x
    id: sen55
    pm_1_0:
      name: "PM <1µm Weight concentration"
      id: pm_1_0
      accuracy_decimals: 1
      filters:
        - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: pm1_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;          
    pm_2_5:
      name: "PM <2.5µm Weight concentration"
      id: pm_2_5
      accuracy_decimals: 1
      filters:
        - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: pm25_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;
          - lvgl.label.update:
              id: aqi_value
              text: !lambda |-
                float val = x; // PM2.5 value
                float aqi = 0.0;

                if (val <= 9.0) {
                  aqi = ((50.0 - 0.0) / (9.0 - 0.0)) * (val - 0.0) + 0.0;
                } else if (val <= 35.4) {
                  aqi = ((100.0 - 51.0) / (35.4 - 9.1)) * (val - 9.1) + 51.0;
                } else if (val <= 55.4) {
                  aqi = ((150.0 - 101.0) / (55.4 - 35.5)) * (val - 35.5) + 101.0;
                } else if (val <= 125.4) {
                  aqi = ((200.0 - 151.0) / (125.4 - 55.5)) * (val - 55.5) + 151.0;
                } else if (val <= 225.4) {
                  aqi = ((300.0 - 201.0) / (225.4 - 125.5)) * (val - 125.5) + 201.0;
                } else if (val <= 500.4) {
                  aqi = ((500.0 - 301.0) / (500.4 - 250.5)) * (val - 250.5) + 301.0;
                } else {
                  return "EVAC";
                }

                static char buffer[10];
                snprintf(buffer, sizeof(buffer), " %d", (int)aqi);
                return buffer;

          - lvgl.widget.update:
              id: aqi_widget
              bg_color: !lambda |-
                float val = x; // PM2.5 value
                float aqi = 0.0;

                if (val <= 9.0) {
                  aqi = ((50.0 - 0.0) / (9.0 - 0.0)) * (val - 0.0) + 0.0;
                } else if (val <= 35.4) {
                  aqi = ((100.0 - 51.0) / (35.4 - 9.1)) * (val - 9.1) + 51.0;
                } else if (val <= 55.4) {
                  aqi = ((150.0 - 101.0) / (55.4 - 35.5)) * (val - 35.5) + 101.0;
                } else if (val <= 125.4) {
                  aqi = ((200.0 - 151.0) / (125.4 - 55.5)) * (val - 55.5) + 151.0;
                } else if (val <= 225.4) {
                  aqi = ((300.0 - 201.0) / (225.4 - 125.5)) * (val - 125.5) + 201.0;
                } else if (val <= 500.4) {
                  aqi = ((500.0 - 301.0) / (500.4 - 250.5)) * (val - 250.5) + 301.0;
                } else {
                  aqi = 500.0;
                }
                id(computed_halo_aqi).publish_state((int)aqi);

                // Return color based on AQI
                if (aqi <= 50) {
                  return lv_color_hex(0x76fa76); // Green
                } else if (aqi <= 100) {
                  return lv_color_hex(0xFFFF00); // Yellow
                } else if (aqi <= 150) {
                  return lv_color_hex(0xFFA500); // Orange
                } else if (aqi <= 200) {
                  return lv_color_hex(0xFF0000); // Red
                } else if (aqi <= 300) {
                  return lv_color_hex(0x800080); // Purple
                } else {
                  return lv_color_hex(0x800000); // Maroon
                }        

    pm_4_0:
      name: "PM <4µm Weight concentration"
      id: pm_4_0
      accuracy_decimals: 1
      filters:
        - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: pm4_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;       
    pm_10_0:
      name: "PM <10µm Weight concentration"
      id: pm_10_0
      accuracy_decimals: 1
      filters:
        - throttle_average: 2s
      on_value:
        then:
          - lvgl.label.update:
              id: pm10_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;       
    temperature:
      name: "SEN55 Temperature"
      accuracy_decimals: 1
      filters:
        - offset: !lambda return -1.0 * id(sen55_temperature_offset).state;
        - throttle_average: 2s
      on_value:
        then:
          - if:
              condition:
                lambda: "return temp_unit_changed;"
              then:
                - lvgl.label.update:
                    id: temperature_units
                    text: !lambda |-
                      if(id(display_temperature_unit).state == "Fahrenheit")
                        return "\u00B0F";
                      else if(id(display_temperature_unit).state == "Kelvin")
                        return "K";
                      return "\u00B0C";
                - globals.set:
                    id: temp_unit_changed
                    value: "false"
          - lvgl.label.update:
              id: temperature_value
              text: !lambda |-
                static char buffer[10];
                if(id(display_temperature_unit).state == "Fahrenheit")
                  snprintf(buffer, sizeof(buffer), "%.01f", (x * 9.0 / 5.0) + 32.0);
                else if(id(display_temperature_unit).state == "Kelvin")
                  snprintf(buffer, sizeof(buffer), "%.01f", x + 273.15);
                else
                  snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x >= 18 && x <= 24;"  # Comfortable temperature range (°C)
              then:
                - lvgl.label.update:
                    id: temperature_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return (x > 24 && x <= 27) || (x >= 16 && x < 18);"  # Slightly uncomfortable (°C)
                    then:
                      - lvgl.label.update:
                          id: temperature_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return (x > 27 && x <= 30) || (x >= 10 && x < 16);"  # Moderately uncomfortable (°C)
                          then:
                            - lvgl.label.update:
                                id: temperature_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: temperature_value
                                text_color: my_red  # Extreme discomfort or unsafe (°C)
    humidity:
      name: "SEN55 Humidity"
      filters:
        - lambda: return x - id(sen55_humidity_offset).state;
      accuracy_decimals: 0
      on_value:
        then:
          - lvgl.label.update:
              id: rh_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x >= 30 && x <= 50;"  # Optimal indoor comfort range (%)
              then:
                - lvgl.label.update:
                    id: rh_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return (x > 50 && x <= 60) || (x >= 20 && x < 30);"  # Slightly out of comfort range (%)
                    then:
                      - lvgl.label.update:
                          id: rh_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return (x > 60 && x <= 70) || (x >= 10 && x < 20);"  # Moderately uncomfortable (%)
                          then:
                            - lvgl.label.update:
                                id: rh_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: rh_value
                                text_color: my_red  # Very uncomfortable or potentially hazardous (%)                             
    voc:
      name: "SEN55 VOC"
      id: sen55_voc
      algorithm_tuning:
        #https://sensirion.com/media/documents/25AB572C/62B463AA/Sensirion_Engineering_Guidelines_SEN5x.pdf
        index_offset: 100
        learning_time_offset_hours: 72
        learning_time_gain_hours: 72
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
      on_value:
        then:
          - lvgl.label.update:
              id: voc_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%3d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x < 150;"
              then:
                - lvgl.label.update:
                    id: voc_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 250;"
                    then:
                      - lvgl.label.update:
                          id: voc_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 400;"
                          then:
                            - lvgl.label.update:
                                id: voc_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: voc_value
                                text_color: my_red                      
    i2c_id: lily_i2c
    address: 0x69
    update_interval: 60s  # Increased from 14s - SEN55 blocks for 4+ seconds per read!

  # Feels like Temp from Home Assistant
  - platform: homeassistant
    name: "Today Feels Like Temp"
    entity_id: sensor.st_00143056_feels_like
    id: weather_today_tempap
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_weather_today_tempap
            text: !lambda |-
              char buffer[20];
              snprintf(buffer, sizeof(buffer), "%.0f°F", x);
              return buffer;

# Current Temp from Home Assistant
  - platform: homeassistant
    name: "Current Temp"
    entity_id: sensor.st_00143056_temperature
    id: weather_today_outdoor_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_weather_today_outdoor_temp
            text: !lambda |-
              char buffer[20];
              snprintf(buffer, sizeof(buffer), "%.0f°F", x);
              return buffer;

  # Precipitation today from Home Assistant
  - platform: homeassistant
    name: "Precipitation Today"
    entity_id: sensor.hhut_nearcast_precipitation_today
    id: weather_precipitation_today
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_weather_precipitation_today
            text: !lambda |-
              // Convert mm to inches (1 in = 25.4 mm) and show with one decimal
              char buffer[20];
              double inches = x / 25.4;
              snprintf(buffer, sizeof(buffer), "%.2f in", inches);
              return buffer;
  
  # 10-day forecast high temperatures from Home Assistant
  - platform: homeassistant
    name: "Forecast Day 1 High Temp"
    entity_id: input_text.forecast_day_1_high_temperature
    id: forecast_day1_high_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_weather_forecast_temphi
            text: !lambda |-
              char buffer[16];
              if (isnan(x)) {
                snprintf(buffer, sizeof(buffer), "H: --°");
              } else {
                snprintf(buffer, sizeof(buffer), "H: %.0f°", x);
              }
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 2 High Temp"
    entity_id: input_text.forecast_day_2_high_temperature
    id: forecast_day2_high_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day2_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float low = id(forecast_day2_low_temp).state;
              if (!isnan(x)) {
                snprintf(high_str, sizeof(high_str), "%.0f", x);
                high_text = high_str;
              }
              if (!isnan(low)) {
                snprintf(low_str, sizeof(low_str), "%.0f", low);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 3 High Temp"
    entity_id: input_text.forecast_day_3_high_temperature
    id: forecast_day3_high_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day3_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float low = id(forecast_day3_low_temp).state;
              if (!isnan(x)) {
                snprintf(high_str, sizeof(high_str), "%.0f", x);
                high_text = high_str;
              }
              if (!isnan(low)) {
                snprintf(low_str, sizeof(low_str), "%.0f", low);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 4 High Temp"
    entity_id: input_text.forecast_day_4_high_temperature
    id: forecast_day4_high_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day4_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float low = id(forecast_day4_low_temp).state;
              if (!isnan(x)) {
                snprintf(high_str, sizeof(high_str), "%.0f", x);
                high_text = high_str;
              }
              if (!isnan(low)) {
                snprintf(low_str, sizeof(low_str), "%.0f", low);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 5 High Temp"
    entity_id: input_text.forecast_day_5_high_temperature
    id: forecast_day5_high_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day5_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float low = id(forecast_day5_low_temp).state;
              if (!isnan(x)) {
                snprintf(high_str, sizeof(high_str), "%.0f", x);
                high_text = high_str;
              }
              if (!isnan(low)) {
                snprintf(low_str, sizeof(low_str), "%.0f", low);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 6 High Temp"
    entity_id: input_text.forecast_day_6_high_temperature
    id: forecast_day6_high_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day6_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float low = id(forecast_day6_low_temp).state;
              if (!isnan(x)) {
                snprintf(high_str, sizeof(high_str), "%.0f", x);
                high_text = high_str;
              }
              if (!isnan(low)) {
                snprintf(low_str, sizeof(low_str), "%.0f", low);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 7 High Temp"
    entity_id: input_text.forecast_day_7_high_temperature
    id: forecast_day7_high_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day7_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float low = id(forecast_day7_low_temp).state;
              if (!isnan(x)) {
                snprintf(high_str, sizeof(high_str), "%.0f", x);
                high_text = high_str;
              }
              if (!isnan(low)) {
                snprintf(low_str, sizeof(low_str), "%.0f", low);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 8 High Temp"
    entity_id: input_text.forecast_day_8_high_temperature
    id: forecast_day8_high_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day8_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float low = id(forecast_day8_low_temp).state;
              if (!isnan(x)) {
                snprintf(high_str, sizeof(high_str), "%.0f", x);
                high_text = high_str;
              }
              if (!isnan(low)) {
                snprintf(low_str, sizeof(low_str), "%.0f", low);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 9 High Temp"
    entity_id: input_text.forecast_day_9_high_temperature
    id: forecast_day9_high_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day9_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float low = id(forecast_day9_low_temp).state;
              if (!isnan(x)) {
                snprintf(high_str, sizeof(high_str), "%.0f", x);
                high_text = high_str;
              }
              if (!isnan(low)) {
                snprintf(low_str, sizeof(low_str), "%.0f", low);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 10 High Temp"
    entity_id: input_text.forecast_day_10_high_temperature
    id: forecast_day10_high_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day10_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float low = id(forecast_day10_low_temp).state;
              if (!isnan(x)) {
                snprintf(high_str, sizeof(high_str), "%.0f", x);
                high_text = high_str;
              }
              if (!isnan(low)) {
                snprintf(low_str, sizeof(low_str), "%.0f", low);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 1 Low Temp"
    entity_id: input_text.forecast_day_1_low_temperature
    id: forecast_day1_low_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_weather_forecast_templo
            text: !lambda |-
              char buffer[16];
              if (isnan(x)) {
                snprintf(buffer, sizeof(buffer), "L: --°");
              } else {
                snprintf(buffer, sizeof(buffer), "L: %.0f°", x);
              }
              return buffer;
  
  - platform: homeassistant
    name: "Forecast Day 2 Low Temp"
    entity_id: input_text.forecast_day_2_low_temperature
    id: forecast_day2_low_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day2_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float high = id(forecast_day2_high_temp).state;
              if (!isnan(high)) {
                snprintf(high_str, sizeof(high_str), "%.0f", high);
                high_text = high_str;
              }
              if (!isnan(x)) {
                snprintf(low_str, sizeof(low_str), "%.0f", x);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 3 Low Temp"
    entity_id: input_text.forecast_day_3_low_temperature
    id: forecast_day3_low_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day3_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float high = id(forecast_day3_high_temp).state;
              if (!isnan(high)) {
                snprintf(high_str, sizeof(high_str), "%.0f", high);
                high_text = high_str;
              }
              if (!isnan(x)) {
                snprintf(low_str, sizeof(low_str), "%.0f", x);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 4 Low Temp"
    entity_id: input_text.forecast_day_4_low_temperature
    id: forecast_day4_low_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day4_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float high = id(forecast_day4_high_temp).state;
              if (!isnan(high)) {
                snprintf(high_str, sizeof(high_str), "%.0f", high);
                high_text = high_str;
              }
              if (!isnan(x)) {
                snprintf(low_str, sizeof(low_str), "%.0f", x);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 5 Low Temp"
    entity_id: input_text.forecast_day_5_low_temperature
    id: forecast_day5_low_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day5_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float high = id(forecast_day5_high_temp).state;
              if (!isnan(high)) {
                snprintf(high_str, sizeof(high_str), "%.0f", high);
                high_text = high_str;
              }
              if (!isnan(x)) {
                snprintf(low_str, sizeof(low_str), "%.0f", x);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 6 Low Temp"
    entity_id: input_text.forecast_day_6_low_temperature
    id: forecast_day6_low_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day6_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float high = id(forecast_day6_high_temp).state;
              if (!isnan(high)) {
                snprintf(high_str, sizeof(high_str), "%.0f", high);
                high_text = high_str;
              }
              if (!isnan(x)) {
                snprintf(low_str, sizeof(low_str), "%.0f", x);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 7 Low Temp"
    entity_id: input_text.forecast_day_7_low_temperature
    id: forecast_day7_low_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day7_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float high = id(forecast_day7_high_temp).state;
              if (!isnan(high)) {
                snprintf(high_str, sizeof(high_str), "%.0f", high);
                high_text = high_str;
              }
              if (!isnan(x)) {
                snprintf(low_str, sizeof(low_str), "%.0f", x);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 8 Low Temp"
    entity_id: input_text.forecast_day_8_low_temperature
    id: forecast_day8_low_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day8_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float high = id(forecast_day8_high_temp).state;
              if (!isnan(high)) {
                snprintf(high_str, sizeof(high_str), "%.0f", high);
                high_text = high_str;
              }
              if (!isnan(x)) {
                snprintf(low_str, sizeof(low_str), "%.0f", x);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 9 Low Temp"
    entity_id: input_text.forecast_day_9_low_temperature
    id: forecast_day9_low_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day9_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float high = id(forecast_day9_high_temp).state;
              if (!isnan(high)) {
                snprintf(high_str, sizeof(high_str), "%.0f", high);
                high_text = high_str;
              }
              if (!isnan(x)) {
                snprintf(low_str, sizeof(low_str), "%.0f", x);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 10 Low Temp"
    entity_id: input_text.forecast_day_10_low_temperature
    id: forecast_day10_low_temp
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day10_temps
            text: !lambda |-
              char buffer[32];
              char high_str[8];
              char low_str[8];
              const char *high_text = "--";
              const char *low_text = "--";
              float high = id(forecast_day10_high_temp).state;
              if (!isnan(high)) {
                snprintf(high_str, sizeof(high_str), "%.0f", high);
                high_text = high_str;
              }
              if (!isnan(x)) {
                snprintf(low_str, sizeof(low_str), "%.0f", x);
                low_text = low_str;
              }
              snprintf(buffer, sizeof(buffer), "H:%s° L:%s°", high_text, low_text);
              return buffer;

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
    id: esp_reboot

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

  - platform: template
    name: "Calibrate SCD40 To 420ppm"
    id: set_SCD40_calibrate
    on_press:
      - scd4x.perform_forced_calibration:
          value: 420
          id: scd40

  - platform: template
    name: "Clean SEN55"
    id: clean_sen55
    on_press:
      - sen5x.start_fan_autoclean: sen55

text_sensor:
  - platform: wireguard
    wireguard_id: wg0
    address:
      name: "WireGuard Address"
      id: wireguard_address_text

    # Convert VOC Index To Text: 
    # https://sensirion.com/media/documents/02232963/6294E043/Info_Note_VOC_Index.pdf
    # https://sensirion.com/media/documents/ACD82D45/6294DFC0/Info_Note_Integration_VOC_NOx_Sensor.pdf
  - platform: template
    name: "VOC Quality"
    id: voc_quality
    icon: mdi:air-filter
    lambda: |-
      if (id(sen55_voc).state < 80) {
        return std::string("Improved");}
      else if (id(sen55_voc).state < 150) {
        return std::string("Normal");}
      else if (id(sen55_voc).state < 250) {
        return std::string("Abnormal");}
      else if (id(sen55_voc).state < 400) {
        return std::string("Very abnormal");}
      else {
        return std::string("Extremely abnormal");}

  # 9-day forecast conditions from Home Assistant
  - platform: homeassistant
    name: "Forecast Day 1 Condition"
    entity_id: input_text.forecast_day_1_condition
    id: forecast_day1_condition
    on_value:
      then:
        - if:
            condition:
              lambda: |-
                std::string cond = id(forecast_day1_condition).state;
                std::transform(cond.begin(), cond.end(), cond.begin(), ::tolower);
                return cond != id(weather_last_condition);
            then:
              - lvgl.label.update:
                  id: lbl_weather_forecast_condition_name
                  text: !lambda 'return id(forecast_day1_condition).state;'
              - lvgl.label.update:
                  id: lbl_weather_forecast_condition_icon
                  text: !lambda |-
                    const std::string cond_b = id(forecast_day1_condition).state;
                    std::string norm_b = cond_b;
                    std::transform(norm_b.begin(), norm_b.end(), norm_b.begin(), ::tolower);
                    if (norm_b.find("clear-night") != std::string::npos) {
                      return "\U000F0594";  // weather-night
                    } else if (norm_b.find("sunny") != std::string::npos || norm_b.find("clear") != std::string::npos) {
                      return "\U000F0599";  // sunny
                    } else if (norm_b.find("snowy-rainy") != std::string::npos) {
                      return "\U000F0F35";  // weather-snowy-rainy
                    } else if (norm_b.find("lightning-rainy") != std::string::npos || norm_b.find("lightning") != std::string::npos) {
                      return "\U000F067E";  // lightning-rainy
                    } else if (norm_b.find("partlycloudy") != std::string::npos) {
                      return "\U000F0595";  // partlycloudy
                    } else if (norm_b.find("cloudy") != std::string::npos) {
                      return "\U000F0590";  // cloudy
                    } else if (norm_b.find("rainy") != std::string::npos) {
                      return "\U000F0597";  // rainy
                    } else if (norm_b.find("snowy") != std::string::npos) {
                      return "\U000F0598";  // snowy
                    } else if (norm_b.find("fog") != std::string::npos) {
                      return "\U000F0591";  // fog
                    } else if (norm_b.find("windy") != std::string::npos) {
                      return "\U000F059E";  // windy
                    } else {
                      return "\U000F14E4";  // weather-unknown
                    }
        - script.execute: update_weather_icon_color

  - platform: homeassistant
    name: "Forecast Day 2 Condition"
    entity_id: input_text.forecast_day_2_condition
    id: forecast_day2_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day2_condition
            text: !lambda 'return x;'
        - lvgl.label.update:
            id: lbl_forecast_day2_icon
            text: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";  // weather-night
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";  // sunny
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";  // weather-snowy-rainy
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";  // lightning-rainy
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";  // partlycloudy
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";  // cloudy
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";  // rainy
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";  // snowy
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";  // fog
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059D";  // windy
              } else {
                return "\U000F14E4";  // weather-unknown
              }
            text_color: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Day 3 Condition"
    entity_id: input_text.forecast_day_3_condition
    id: forecast_day3_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day3_condition
            text: !lambda 'return x;'
        - lvgl.label.update:
            id: lbl_forecast_day3_icon
            text: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";  // weather-night
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";  // sunny
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";  // weather-snowy-rainy
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";  // lightning-rainy
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";  // partlycloudy
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";  // cloudy
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";  // rainy
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";  // snowy
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";  // fog
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059D";  // windy
              } else {
                return "\U000F14E4";  // weather-unknown
              }
            text_color: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Day 4 Condition"
    entity_id: input_text.forecast_day_4_condition
    id: forecast_day4_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day4_condition
            text: !lambda 'return x;'
        - lvgl.label.update:
            id: lbl_forecast_day4_icon
            text: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";  // weather-night
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";  // sunny
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";  // weather-snowy-rainy
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";  // lightning-rainy
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";  // partlycloudy
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";  // cloudy
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";  // rainy
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";  // snowy
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";  // fog
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059D";  // windy
              } else {
                return "\U000F14E4";  // weather-unknown
              }
            text_color: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Day 5 Condition"
    entity_id: input_text.forecast_day_5_condition
    id: forecast_day5_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day5_condition
            text: !lambda 'return x;'
        - lvgl.label.update:
            id: lbl_forecast_day5_icon
            text: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";  // weather-night
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";  // sunny
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";  // weather-snowy-rainy
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";  // lightning-rainy
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";  // partlycloudy
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";  // cloudy
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";  // rainy
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";  // snowy
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";  // fog
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059D";  // windy
              } else {
                return "\U000F14E4";  // weather-unknown
              }
            text_color: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Day 6 Condition"
    entity_id: input_text.forecast_day_6_condition
    id: forecast_day6_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day6_condition
            text: !lambda 'return x;'
        - lvgl.label.update:
            id: lbl_forecast_day6_icon
            text: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";  // weather-night
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";  // sunny
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";  // weather-snowy-rainy
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";  // lightning-rainy
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";  // partlycloudy
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";  // cloudy
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";  // rainy
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";  // snowy
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";  // fog
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059D";  // windy
              } else {
                return "\U000F14E4";  // weather-unknown
              }
            text_color: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Day 7 Condition"
    entity_id: input_text.forecast_day_7_condition
    id: forecast_day7_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day7_condition
            text: !lambda 'return x;'
        - lvgl.label.update:
            id: lbl_forecast_day7_icon
            text: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";  // weather-night
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";  // sunny
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";  // weather-snowy-rainy
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";  // lightning-rainy
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";  // partlycloudy
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";  // cloudy
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";  // rainy
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";  // snowy
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";  // fog
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059D";  // windy
              } else {
                return "\U000F14E4";  // weather-unknown
              }
            text_color: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Day 8 Condition"
    entity_id: input_text.forecast_day_8_condition
    id: forecast_day8_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day8_condition
            text: !lambda 'return x;'
        - lvgl.label.update:
            id: lbl_forecast_day8_icon
            text: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";  // weather-night
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";  // sunny
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";  // weather-snowy-rainy
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";  // lightning-rainy
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";  // partlycloudy
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";  // cloudy
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";  // rainy
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";  // snowy
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";  // fog
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059D";  // windy
              } else {
                return "\U000F14E4";  // weather-unknown
              }
            text_color: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Day 9 Condition"
    entity_id: input_text.forecast_day_9_condition
    id: forecast_day9_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day9_condition
            text: !lambda 'return x;'
        - lvgl.label.update:
            id: lbl_forecast_day9_icon
            text: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";  // weather-night
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";  // sunny
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";  // weather-snowy-rainy
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";  // lightning-rainy
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";  // partlycloudy
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";  // cloudy
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";  // rainy
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";  // snowy
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";  // fog
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059D";  // windy
              } else {
                return "\U000F14E4";  // weather-unknown
              }
            text_color: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Day 10 Condition"
    entity_id: input_text.forecast_day_10_condition
    id: forecast_day10_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day10_condition
            text: !lambda 'return x;'
        - lvgl.label.update:
            id: lbl_forecast_day10_icon
            text: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";  // weather-night
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";  // sunny
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";  // weather-snowy-rainy
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";  // lightning-rainy
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";  // partlycloudy
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";  // cloudy
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";  // rainy
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";  // snowy
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";  // fog
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059D";  // windy
              } else {
                return "\U000F14E4";  // weather-unknown
              }
            text_color: !lambda |-
              const std::string condition = x;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  # 10-day forecast dates from Home Assistant
  - platform: homeassistant
    name: "Forecast Day 1 Date"
    entity_id: input_text.forecast_day_1_date
    id: forecast_day1_header

  - platform: homeassistant
    name: "Forecast Day 2 Date"
    entity_id: input_text.forecast_day_2_date
    id: forecast_day2_header
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day2_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Day 3 Date"
    entity_id: input_text.forecast_day_3_date
    id: forecast_day3_header
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day3_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Day 4 Date"
    entity_id: input_text.forecast_day_4_date
    id: forecast_day4_header
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day4_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Day 5 Date"
    entity_id: input_text.forecast_day_5_date
    id: forecast_day5_header
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day5_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Day 6 Date"
    entity_id: input_text.forecast_day_6_date
    id: forecast_day6_header
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day6_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Day 7 Date"
    entity_id: input_text.forecast_day_7_date
    id: forecast_day7_header
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day7_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Day 8 Date"
    entity_id: input_text.forecast_day_8_date
    id: forecast_day8_header
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day8_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Day 9 Date"
    entity_id: input_text.forecast_day_9_date
    id: forecast_day9_header
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day9_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Day 10 Date"
    entity_id: input_text.forecast_day_10_date
    id: forecast_day10_header
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day10_header
            text: !lambda 'return x;'

  # 10-day forecast precipitation probability from Home Assistant
  - platform: homeassistant
    name: "Forecast Day 1 Precipitation Probability"
    entity_id: input_text.forecast_day_1_precipitation_probability
    id: forecast_day1_precip_prob
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_weather_today_dailyprecipprob
            text: !lambda |-
              char buffer[30];
              snprintf(buffer, sizeof(buffer), "Chance: %s%%", x.c_str());
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 2 Precipitation Probability"
    entity_id: input_text.forecast_day_2_precipitation_probability
    id: forecast_day2_precip_prob
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day2_precip_prob
            text: !lambda |-
              char buffer[30];
              snprintf(buffer, sizeof(buffer), "Chance: %s%%", x.c_str());
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 3 Precipitation Probability"
    entity_id: input_text.forecast_day_3_precipitation_probability
    id: forecast_day3_precip_prob
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day3_precip_prob
            text: !lambda |-
              char buffer[30];
              snprintf(buffer, sizeof(buffer), "Chance: %s%%", x.c_str());
              return buffer;
  
  - platform: homeassistant
    name: "Forecast Day 4 Precipitation Probability"
    entity_id: input_text.forecast_day_4_precipitation_probability
    id: forecast_day4_precip_prob
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day4_precip_prob
            text: !lambda |-
              char buffer[30];
              snprintf(buffer, sizeof(buffer), "Chance: %s%%", x.c_str());
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 5 Precipitation Probability"
    entity_id: input_text.forecast_day_5_precipitation_probability
    id: forecast_day5_precip_prob
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day5_precip_prob
            text: !lambda |-
              char buffer[30];
              snprintf(buffer, sizeof(buffer), "Chance: %s%%", x.c_str());
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 6 Precipitation Probability"
    entity_id: input_text.forecast_day_6_precipitation_probability
    id: forecast_day6_precip_prob
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day6_precip_prob
            text: !lambda |-
              char buffer[30];
              snprintf(buffer, sizeof(buffer), "Chance: %s%%", x.c_str());
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 7 Precipitation Probability"
    entity_id: input_text.forecast_day_7_precipitation_probability
    id: forecast_day7_precip_prob
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day7_precip_prob
            text: !lambda |-
              char buffer[30];
              snprintf(buffer, sizeof(buffer), "Chance: %s%%", x.c_str());
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 8 Precipitation Probability"
    entity_id: input_text.forecast_day_8_precipitation_probability
    id: forecast_day8_precip_prob
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day8_precip_prob
            text: !lambda |-
              char buffer[30];
              snprintf(buffer, sizeof(buffer), "Chance: %s%%", x.c_str());
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 9 Precipitation Probability"
    entity_id: input_text.forecast_day_9_precipitation_probability
    id: forecast_day9_precip_prob
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day9_precip_prob
            text: !lambda |-
              char buffer[30];
              snprintf(buffer, sizeof(buffer), "Chance: %s%%", x.c_str());
              return buffer;

  - platform: homeassistant
    name: "Forecast Day 10 Precipitation Probability"
    entity_id: input_text.forecast_day_10_precipitation_probability
    id: forecast_day10_precip_prob
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_forecast_day10_precip_prob
            text: !lambda |-
              char buffer[30];
              snprintf(buffer, sizeof(buffer), "Chance: %s%%", x.c_str());
              return buffer;

  # Hourly forecast sensors from Home Assistant (6 hours)
  - platform: homeassistant
    name: "Forecast Hour 1 Date"
    entity_id: input_text.forecast_hour_1_date
    id: forecast_hour1_date
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Hour 1 Temperature"
    entity_id: input_text.forecast_hour_1_temperature
    id: forecast_hour1_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_temp
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 1 Apparent Temperature"
    entity_id: input_text.forecast_hour_1_apparent_temperature
    id: forecast_hour1_apparent_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_feels
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 1 Condition"
    entity_id: input_text.forecast_hour_1_condition
    id: forecast_hour1_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_icon
            text: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059E";
              } else {
                return "\U000F14E4";
              }
            text_color: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Hour 1 Humidity"
    entity_id: input_text.forecast_hour_1_humidity
    id: forecast_hour1_humidity
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_humid
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 1 Precipitation"
    entity_id: input_text.forecast_hour_1_precipitation
    id: forecast_hour1_precipitation
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_precip_amt
            text: !lambda |-
              return x + " in";

  - platform: homeassistant
    name: "Forecast Hour 1 Precipitation Probability"
    entity_id: input_text.forecast_hour_1_precipitation_probability
    id: forecast_hour1_precipitation_probability
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_precip
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 1 Pressure"
    entity_id: input_text.forecast_hour_1_pressure
    id: forecast_hour1_pressure
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_pressure
            text: !lambda |-
              return x + " mb";

  - platform: homeassistant
    name: "Forecast Hour 1 UV Index"
    entity_id: input_text.forecast_hour_1_uv_index
    id: forecast_hour1_uv_index
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_uv
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 1 Wind Bearing"
    entity_id: input_text.forecast_hour_1_wind_bearing
    id: forecast_hour1_wind_bearing
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_wind_dir
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 1 Wind Gust Speed"
    entity_id: input_text.forecast_hour_1_wind_gust_speed
    id: forecast_hour1_wind_gust_speed

  - platform: homeassistant
    name: "Forecast Hour 1 Wind Speed"
    entity_id: input_text.forecast_hour_1_wind_speed
    id: forecast_hour1_wind_speed
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour1_wind
            text: !lambda |-
              return x + " mph";

  # Hour 2
  - platform: homeassistant
    name: "Forecast Hour 2 Date"
    entity_id: input_text.forecast_hour_2_date
    id: forecast_hour2_date
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Hour 2 Temperature"
    entity_id: input_text.forecast_hour_2_temperature
    id: forecast_hour2_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_temp
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 2 Apparent Temperature"
    entity_id: input_text.forecast_hour_2_apparent_temperature
    id: forecast_hour2_apparent_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_feels
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 2 Condition"
    entity_id: input_text.forecast_hour_2_condition
    id: forecast_hour2_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_icon
            text: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059E";
              } else {
                return "\U000F14E4";
              }
            text_color: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Hour 2 Humidity"
    entity_id: input_text.forecast_hour_2_humidity
    id: forecast_hour2_humidity
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_humid
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 2 Precipitation"
    entity_id: input_text.forecast_hour_2_precipitation
    id: forecast_hour2_precipitation
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_precip_amt
            text: !lambda |-
              return x + " in";

  - platform: homeassistant
    name: "Forecast Hour 2 Precipitation Probability"
    entity_id: input_text.forecast_hour_2_precipitation_probability
    id: forecast_hour2_precipitation_probability
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_precip
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 2 Pressure"
    entity_id: input_text.forecast_hour_2_pressure
    id: forecast_hour2_pressure
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_pressure
            text: !lambda |-
              return x + " mb";

  - platform: homeassistant
    name: "Forecast Hour 2 UV Index"
    entity_id: input_text.forecast_hour_2_uv_index
    id: forecast_hour2_uv_index
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_uv
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 2 Wind Bearing"
    entity_id: input_text.forecast_hour_2_wind_bearing
    id: forecast_hour2_wind_bearing
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_wind_dir
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 2 Wind Gust Speed"
    entity_id: input_text.forecast_hour_2_wind_gust_speed
    id: forecast_hour2_wind_gust_speed

  - platform: homeassistant
    name: "Forecast Hour 2 Wind Speed"
    entity_id: input_text.forecast_hour_2_wind_speed
    id: forecast_hour2_wind_speed
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour2_wind
            text: !lambda |-
              return x + " mph";

  # Hour 3
  - platform: homeassistant
    name: "Forecast Hour 3 Date"
    entity_id: input_text.forecast_hour_3_date
    id: forecast_hour3_date
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Hour 3 Temperature"
    entity_id: input_text.forecast_hour_3_temperature
    id: forecast_hour3_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_temp
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 3 Apparent Temperature"
    entity_id: input_text.forecast_hour_3_apparent_temperature
    id: forecast_hour3_apparent_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_feels
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 3 Condition"
    entity_id: input_text.forecast_hour_3_condition
    id: forecast_hour3_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_icon
            text: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059E";
              } else {
                return "\U000F14E4";
              }
            text_color: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Hour 3 Humidity"
    entity_id: input_text.forecast_hour_3_humidity
    id: forecast_hour3_humidity
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_humid
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 3 Precipitation"
    entity_id: input_text.forecast_hour_3_precipitation
    id: forecast_hour3_precipitation
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_precip_amt
            text: !lambda |-
              return x + " in";

  - platform: homeassistant
    name: "Forecast Hour 3 Precipitation Probability"
    entity_id: input_text.forecast_hour_3_precipitation_probability
    id: forecast_hour3_precipitation_probability
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_precip
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 3 Pressure"
    entity_id: input_text.forecast_hour_3_pressure
    id: forecast_hour3_pressure
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_pressure
            text: !lambda |-
              return x + " mb";

  - platform: homeassistant
    name: "Forecast Hour 3 UV Index"
    entity_id: input_text.forecast_hour_3_uv_index
    id: forecast_hour3_uv_index
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_uv
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 3 Wind Bearing"
    entity_id: input_text.forecast_hour_3_wind_bearing
    id: forecast_hour3_wind_bearing
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_wind_dir
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 3 Wind Gust Speed"
    entity_id: input_text.forecast_hour_3_wind_gust_speed
    id: forecast_hour3_wind_gust_speed

  - platform: homeassistant
    name: "Forecast Hour 3 Wind Speed"
    entity_id: input_text.forecast_hour_3_wind_speed
    id: forecast_hour3_wind_speed
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour3_wind
            text: !lambda |-
              return x + " mph";

  # Hour 4
  - platform: homeassistant
    name: "Forecast Hour 4 Date"
    entity_id: input_text.forecast_hour_4_date
    id: forecast_hour4_date
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Hour 4 Temperature"
    entity_id: input_text.forecast_hour_4_temperature
    id: forecast_hour4_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_temp
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 4 Apparent Temperature"
    entity_id: input_text.forecast_hour_4_apparent_temperature
    id: forecast_hour4_apparent_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_feels
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 4 Condition"
    entity_id: input_text.forecast_hour_4_condition
    id: forecast_hour4_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_icon
            text: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059E";
              } else {
                return "\U000F14E4";
              }
            text_color: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Hour 4 Humidity"
    entity_id: input_text.forecast_hour_4_humidity
    id: forecast_hour4_humidity
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_humid
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 4 Precipitation"
    entity_id: input_text.forecast_hour_4_precipitation
    id: forecast_hour4_precipitation
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_precip_amt
            text: !lambda |-
              return x + " in";

  - platform: homeassistant
    name: "Forecast Hour 4 Precipitation Probability"
    entity_id: input_text.forecast_hour_4_precipitation_probability
    id: forecast_hour4_precipitation_probability
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_precip
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 4 Pressure"
    entity_id: input_text.forecast_hour_4_pressure
    id: forecast_hour4_pressure
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_pressure
            text: !lambda |-
              return x + " mb";

  - platform: homeassistant
    name: "Forecast Hour 4 UV Index"
    entity_id: input_text.forecast_hour_4_uv_index
    id: forecast_hour4_uv_index
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_uv
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 4 Wind Bearing"
    entity_id: input_text.forecast_hour_4_wind_bearing
    id: forecast_hour4_wind_bearing
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_wind_dir
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 4 Wind Gust Speed"
    entity_id: input_text.forecast_hour_4_wind_gust_speed
    id: forecast_hour4_wind_gust_speed

  - platform: homeassistant
    name: "Forecast Hour 4 Wind Speed"
    entity_id: input_text.forecast_hour_4_wind_speed
    id: forecast_hour4_wind_speed
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour4_wind
            text: !lambda |-
              return x + " mph";

  # Hour 5
  - platform: homeassistant
    name: "Forecast Hour 5 Date"
    entity_id: input_text.forecast_hour_5_date
    id: forecast_hour5_date
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Hour 5 Temperature"
    entity_id: input_text.forecast_hour_5_temperature
    id: forecast_hour5_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_temp
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 5 Apparent Temperature"
    entity_id: input_text.forecast_hour_5_apparent_temperature
    id: forecast_hour5_apparent_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_feels
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 5 Condition"
    entity_id: input_text.forecast_hour_5_condition
    id: forecast_hour5_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_icon
            text: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059E";
              } else {
                return "\U000F14E4";
              }
            text_color: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Hour 5 Humidity"
    entity_id: input_text.forecast_hour_5_humidity
    id: forecast_hour5_humidity
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_humid
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 5 Precipitation"
    entity_id: input_text.forecast_hour_5_precipitation
    id: forecast_hour5_precipitation
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_precip_amt
            text: !lambda |-
              return x + " in";

  - platform: homeassistant
    name: "Forecast Hour 5 Precipitation Probability"
    entity_id: input_text.forecast_hour_5_precipitation_probability
    id: forecast_hour5_precipitation_probability
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_precip
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 5 Pressure"
    entity_id: input_text.forecast_hour_5_pressure
    id: forecast_hour5_pressure
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_pressure
            text: !lambda |-
              return x + " mb";

  - platform: homeassistant
    name: "Forecast Hour 5 UV Index"
    entity_id: input_text.forecast_hour_5_uv_index
    id: forecast_hour5_uv_index
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_uv
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 5 Wind Bearing"
    entity_id: input_text.forecast_hour_5_wind_bearing
    id: forecast_hour5_wind_bearing
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_wind_dir
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 5 Wind Gust Speed"
    entity_id: input_text.forecast_hour_5_wind_gust_speed
    id: forecast_hour5_wind_gust_speed

  - platform: homeassistant
    name: "Forecast Hour 5 Wind Speed"
    entity_id: input_text.forecast_hour_5_wind_speed
    id: forecast_hour5_wind_speed
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour5_wind
            text: !lambda |-
              return x + " mph";

  # Hour 6 Forecast Sensors
  - platform: homeassistant
    name: "Forecast Hour 6 Date"
    entity_id: input_text.forecast_hour_6_date
    id: forecast_hour6_date
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_header
            text: !lambda 'return x;'

  - platform: homeassistant
    name: "Forecast Hour 6 Temperature"
    entity_id: input_text.forecast_hour_6_temperature
    id: forecast_hour6_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_temp
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 6 Apparent Temperature"
    entity_id: input_text.forecast_hour_6_apparent_temperature
    id: forecast_hour6_apparent_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_feels
            text: !lambda |-
              return x + "°";

  - platform: homeassistant
    name: "Forecast Hour 6 Condition"
    entity_id: input_text.forecast_hour_6_condition
    id: forecast_hour6_condition
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_icon
            text: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return "\U000F0594";
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return "\U000F0599";
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return "\U000F0F35";
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return "\U000F067E";
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return "\U000F0595";
              } else if (normalized.find("cloudy") != std::string::npos) {
                return "\U000F0590";
              } else if (normalized.find("rainy") != std::string::npos) {
                return "\U000F0597";
              } else if (normalized.find("snowy") != std::string::npos) {
                return "\U000F0598";
              } else if (normalized.find("fog") != std::string::npos) {
                return "\U000F0591";
              } else if (normalized.find("windy") != std::string::npos) {
                return "\U000F059E";
              } else {
                return "\U000F14E4";
              }
            text_color: !lambda |-
              std::string normalized = x;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
              if (normalized.find("clear-night") != std::string::npos) {
                return lv_color_hex(0x6A5ACD);
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                return lv_color_hex(0xFFD700);
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                return lv_color_hex(0xAFEEEE);
              } else if (normalized.find("lightning-rainy") != std::string::npos || normalized.find("lightning") != std::string::npos) {
                return lv_color_hex(0xFF1493);
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                return lv_color_hex(0x87CEFA);
              } else if (normalized.find("cloudy") != std::string::npos) {
                return lv_color_hex(0xA9A9A9);
              } else if (normalized.find("rainy") != std::string::npos) {
                return lv_color_hex(0x4169E1);
              } else if (normalized.find("snowy") != std::string::npos) {
                return lv_color_hex(0xDCDCDC);
              } else if (normalized.find("fog") != std::string::npos) {
                return lv_color_hex(0xB0C4DE);
              } else if (normalized.find("windy") != std::string::npos) {
                return lv_color_hex(0x90EE90);
              } else {
                return lv_color_hex(0xFFFFFF);
              }

  - platform: homeassistant
    name: "Forecast Hour 6 Humidity"
    entity_id: input_text.forecast_hour_6_humidity
    id: forecast_hour6_humidity
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_humid
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 6 Precipitation"
    entity_id: input_text.forecast_hour_6_precipitation
    id: forecast_hour6_precipitation
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_precip_amt
            text: !lambda |-
              return x + " in";

  - platform: homeassistant
    name: "Forecast Hour 6 Precipitation Probability"
    entity_id: input_text.forecast_hour_6_precipitation_probability
    id: forecast_hour6_precipitation_probability
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_precip
            text: !lambda |-
              return x + "%";

  - platform: homeassistant
    name: "Forecast Hour 6 Pressure"
    entity_id: input_text.forecast_hour_6_pressure
    id: forecast_hour6_pressure
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_pressure
            text: !lambda |-
              return x + " mb";

  - platform: homeassistant
    name: "Forecast Hour 6 UV Index"
    entity_id: input_text.forecast_hour_6_uv_index
    id: forecast_hour6_uv_index
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_uv
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 6 Wind Bearing"
    entity_id: input_text.forecast_hour_6_wind_bearing
    id: forecast_hour6_wind_bearing
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_wind_dir
            text: !lambda |-
              return x;

  - platform: homeassistant
    name: "Forecast Hour 6 Wind Gust Speed"
    entity_id: input_text.forecast_hour_6_wind_gust_speed
    id: forecast_hour6_wind_gust_speed

  - platform: homeassistant
    name: "Forecast Hour 6 Wind Speed"
    entity_id: input_text.forecast_hour_6_wind_speed
    id: forecast_hour6_wind_speed
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_hourly_hour6_wind
            text: !lambda |-
              return x + " mph";

font:
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icons_100
    size: 100
    bpp: 4
    glyphs: [
      "\U000F0594", # clear-night
      "\U000F0590", # cloudy
      "\U000F0F2F", # exceptional
      "\U000F0591", # fog
      "\U000F0592", # hail
      "\U000F0593", # lightning
      "\U000F067E", # lightning-rainy
      "\U000F0595", # partlycloudy
      "\U000F0596", # pouring
      "\U000F0597", # rainy
      "\U000F0598", # snowy
      "\U000F067F", # snowy-rainy
      "\U000F0599", # sunny
      "\U000F059D", # windy
      "\U000F059E", # windy-variant
      "\U000F14E4", # sunny-off
      ]

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icons_80
    size: 80
    bpp: 4
    glyphs: [
      "\U000F0594", # clear-night
      "\U000F0590", # cloudy
      "\U000F0F2F", # exceptional
      "\U000F0591", # fog
      "\U000F0592", # hail
      "\U000F0593", # lightning
      "\U000F067E", # lightning-rainy
      "\U000F0595", # partlycloudy
      "\U000F0596", # pouring
      "\U000F0597", # rainy
      "\U000F0598", # snowy
      "\U000F067F", # snowy-rainy
      "\U000F0599", # sunny
      "\U000F059D", # windy
      "\U000F059E", # windy-variant
      "\U000F14E4", # sunny-off
      ]

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icons_50
    size: 50
    bpp: 4
    glyphs: [
      "\U000F0594", # clear-night
      "\U000F0590", # cloudy
      "\U000F0F2F", # exceptional
      "\U000F0591", # fog
      "\U000F0592", # hail
      "\U000F0593", # lightning
      "\U000F067E", # lightning-rainy
      "\U000F0595", # partlycloudy
      "\U000F0596", # pouring
      "\U000F0597", # rainy
      "\U000F0598", # snowy
      "\U000F067F", # snowy-rainy
      "\U000F0599", # sunny
      "\U000F059D", # windy
      "\U000F059E", # windy-variant
      "\U000F14E4", # sunny-off
      ]

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icons_40
    size: 40
    bpp: 4
    glyphs: [
      "\U000F0594", # clear-night
      "\U000F0590", # cloudy
      "\U000F0F2F", # exceptional
      "\U000F0591", # fog
      "\U000F0592", # hail
      "\U000F0593", # lightning
      "\U000F067E", # lightning-rainy
      "\U000F0595", # partlycloudy
      "\U000F0596", # pouring
      "\U000F0597", # rainy
      "\U000F0598", # snowy
      "\U000F067F", # snowy-rainy
      "\U000F0599", # sunny
      "\U000F059D", # windy
      "\U000F059E", # windy-variant
      "\U000F14E4", # sunny-off
      ]

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icons_20
    size: 20
    bpp: 4
    glyphs: [
      "\U000F0594", # clear-night
      "\U000F0590", # cloudy
      "\U000F0F2F", # exceptional
      "\U000F0591", # fog
      "\U000F0592", # hail
      "\U000F0593", # lightning
      "\U000F067E", # lightning-rainy
      "\U000F0595", # partlycloudy
      "\U000F0596", # pouring
      "\U000F0597", # rainy
      "\U000F0598", # snowy
      "\U000F067F", # snowy-rainy
      "\U000F0599", # sunny
      "\U000F059D", # windy
      "\U000F059E", # windy-variant
      "\U000F14E4", # sunny-off
      ]

  # Large fonts for vertical clock
  - file: "gfonts://Montserrat"
    id: montserrat_80
    size: 80
    bpp: 4
    glyphs: " 0123456789:-"
  - file: "gfonts://Montserrat"
    id: montserrat_50
    size: 50
    bpp: 4
    glyphs: " 0123456789APM-"
  - file: "gfonts://Montserrat"
    id: montserrat_24
    size: 24
    bpp: 4
    glyphs: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ,:-"

light:
  # - platform: esp32_rmt_led_strip
  #   id: rgb_light
  #   name: "Halo"
  #   pin: GPIO47
  #   rgb_order: GRB
  #   default_transition_length: 2s
  #   chipset: SK6812
  #   num_leds: 11
  #   effects:
  #     - pulse:
  #         name: "Slow Pulse" 
  #         transition_length: 500ms
  #         update_interval: 500ms
  #         min_brightness: 10%
  #         max_brightness: 50%
  #     - addressable_rainbow:
  #         name: Rainbow Effect With Custom Values
  #         speed: 10
  #         width: 50

  - platform: esp32_rmt_led_strip
    name: Halo
    id: rgb_light
    rgb_order: GRB
    pin: GPIO47
    num_leds: 12
    chipset: WS2812
    restore_mode: ALWAYS_OFF
    effects:
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 50
      - addressable_rainbow:
          name: Addressable Rainbow
      - addressable_color_wipe:
          name: Color Wipe
      - addressable_scan:
          name: Scan
      - addressable_twinkle:
          name: Twinkle
      - addressable_fireworks:
          name: Fireworks
      - strobe:
          name: Strobe
      - addressable_random_twinkle:
          name: Random Twinkle
      - addressable_lambda:
          name: "Weather Condition"
          update_interval: 250ms
          lambda: |-
            // Get the current weather condition from Day 1 forecast
            static uint32_t last_flash = 0;
            static bool flash_on = false;
            static uint32_t next_flash_delay = 1500;
            uint32_t now = millis();

            std::string condition = id(forecast_day1_condition).state;
            std::string normalized = condition;
            std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);

            // Check if it's a lightning condition
            bool is_lightning = (normalized.find("lightning-rainy") != std::string::npos ||
                                normalized.find("lightning") != std::string::npos);

            Color weather_color;

            if (is_lightning) {
              // Lightning effect - random flashes
              // Flash randomly every 1-3 seconds
              if (now - last_flash > next_flash_delay) {
                flash_on = !flash_on;
                last_flash = now;
                // Generate random delay between 1000-3000ms for next flash
                next_flash_delay = 1000 + (esp_random() % 2000);
              }

              if (flash_on) {
                weather_color = Color(255, 255, 255);  // Bright white flash
              } else {
                weather_color = Color(255, 20, 147);   // Deep pink between flashes
              }
            } else {
              // Regular solid weather colors
              if (normalized.find("clear-night") != std::string::npos) {
                weather_color = Color(106, 90, 205);  // Slate Blue
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                weather_color = Color(255, 215, 0);   // Gold
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                weather_color = Color(175, 238, 238); // Light Cyan
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                weather_color = Color(135, 206, 250); // Light Sky Blue
              } else if (normalized.find("cloudy") != std::string::npos) {
                weather_color = Color(169, 169, 169); // Dark Gray
              } else if (normalized.find("rainy") != std::string::npos) {
                weather_color = Color(65, 105, 225);  // Royal Blue
              } else if (normalized.find("snowy") != std::string::npos) {
                weather_color = Color(220, 220, 220); // Gainsboro
              } else if (normalized.find("fog") != std::string::npos) {
                weather_color = Color(176, 196, 222); // Light Steel Blue
              } else if (normalized.find("windy") != std::string::npos) {
                weather_color = Color(144, 238, 144); // Light Green
              } else {
                weather_color = Color(255, 255, 255); // White (default)
              }
            }

            // Set all LEDs to the weather condition color
            it.all() = weather_color;
      - addressable_lambda:
          name: "Auto Context"
          update_interval: 250ms
          lambda: |-
            static uint32_t last_flash = 0;
            static bool flash_on = false;
            static uint32_t next_flash_delay = 1500;
            uint32_t now = millis();

            Color led_color;
            int page = id(current_page_index);

            // AirQ page (1) - show AQI color
            if (page == 1) {
              float aqi = id(computed_halo_aqi).state;
              if (std::isnan(aqi) || aqi <= 50) {
                // Turn off LEDs when air quality is good (just like AQI Color mode)
                led_color = Color(0, 0, 0);        // Off (Good)
              } else if (aqi <= 100) {
                led_color = Color(255, 255, 0);    // Yellow (Moderate)
              } else if (aqi <= 150) {
                led_color = Color(255, 165, 0);    // Orange (Unhealthy for Sensitive)
              } else if (aqi <= 200) {
                led_color = Color(255, 0, 0);      // Red (Unhealthy)
              } else if (aqi <= 300) {
                led_color = Color(128, 0, 128);    // Purple (Very Unhealthy)
              } else {
                led_color = Color(128, 0, 0);      // Maroon (Hazardous)
              }
            }
            // Weather pages (3) - show weather condition color
            else if (page == 3) {
              std::string condition = id(forecast_day1_condition).state;
              std::string normalized = condition;
              std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);

              // Check if it's a lightning condition
              bool is_lightning = (normalized.find("lightning-rainy") != std::string::npos ||
                                  normalized.find("lightning") != std::string::npos);

              if (is_lightning) {
                // Lightning effect - random flashes
                if (now - last_flash > next_flash_delay) {
                  flash_on = !flash_on;
                  last_flash = now;
                  next_flash_delay = 1000 + (esp_random() % 2000);  // Random 1000-3000ms
                }
                led_color = flash_on ? Color(255, 255, 255) : Color(255, 20, 147);
              } else if (normalized.find("clear-night") != std::string::npos) {
                led_color = Color(106, 90, 205);   // Slate Blue
              } else if (normalized.find("sunny") != std::string::npos || normalized.find("clear") != std::string::npos) {
                led_color = Color(255, 215, 0);    // Gold
              } else if (normalized.find("snowy-rainy") != std::string::npos) {
                led_color = Color(175, 238, 238);  // Light Cyan
              } else if (normalized.find("partlycloudy") != std::string::npos) {
                led_color = Color(135, 206, 250);  // Light Sky Blue
              } else if (normalized.find("cloudy") != std::string::npos) {
                led_color = Color(169, 169, 169);  // Dark Gray
              } else if (normalized.find("rainy") != std::string::npos) {
                led_color = Color(65, 105, 225);   // Royal Blue
              } else if (normalized.find("snowy") != std::string::npos) {
                led_color = Color(220, 220, 220);  // Gainsboro
              } else if (normalized.find("fog") != std::string::npos) {
                led_color = Color(176, 196, 222);  // Light Steel Blue
              } else if (normalized.find("windy") != std::string::npos) {
                led_color = Color(144, 238, 144);  // Light Green
              } else {
                led_color = Color(255, 255, 255);  // White (default)
              }
            }
            // Network page (1) or other - turn LEDs fully off instead of dim white
            else {
              led_color = Color(0, 0, 0);    // Off
            }

            // Set all LEDs to the contextual color
            it.all() = led_color;

  - platform: monochromatic
    output: backlight
    name: "Display Backlight"
    id: display_backlight
    restore_mode: ALWAYS_ON
    on_turn_on:
      - logger.log: "Display backlight turned ON"
      - lambda: 'id(display_backlight_is_on) = true;'
      - binary_sensor.template.publish:
          id: display_backlight_state
          state: ON
    on_turn_off:
      - logger.log: "Display backlight turned OFF"
      - lambda: 'id(display_backlight_is_on) = false;'
      - binary_sensor.template.publish:
          id: display_backlight_state
          state: OFF

lvgl:
  id: lvgl_main
  displays:
    - lily_display
  touchscreens:
    - lily_touch
  buffer_size: 25%  # Increased from 20% to 25% for better performance (BLE disabled)
  disp_bg_color: 0x000000
  disp_bg_opa: COVER
  disp_bg_image: none
  log_level: WARN  # Reduce logging overhead

  gradients:
    - id: wifi_signal_gradient
      direction: hor
      dither: none
      stops:
        - color: 0xFF0000  # Red - weak signal
          position: 0
        - color: 0xFF8000  # Orange
          position: 64
        - color: 0xFFFF00  # Yellow
          position: 128
        - color: 0x80FF00  # Yellow-green
          position: 192
        - color: 0x00FF00  # Green - strong signal
          position: 255
  pages:
    - id: vertical_clock_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      on_load:
        - script.execute: page_transition_cleanup
        - lambda: |-
            id(current_page_index) = 0;
            id(time_update_last_text).clear();
            id(colon_blink_state) = true;  // Ensure colon is visible when page loads
        - script.execute: time_update
        - script.execute: update_colon_widget
      widgets:
        # Large time display vertically centered
        - label:
            id: vclock_hours
            align: CENTER
            text_font: montserrat_80
            text_color: my_white
            x: 0
            y: -120
            text: "12"

        - label:
            id: vclock_colon
            align: CENTER
            text_font: montserrat_80
            text_color: my_white
            x: 0
            y: -20
            text: ":"

        - label:
            id: vclock_minutes
            align: CENTER
            text_font: montserrat_80
            text_color: my_white
            x: 0
            y: 80
            text: "00"

        - label:
            id: vclock_ampm
            align: CENTER
            text_font: montserrat_50
            text_color: my_white
            x: 0
            y: 180
            text: "AM"

        # Date below time
        - label:
            id: vclock_date
            align: CENTER
            text_font: montserrat_24
            text_color: my_gray
            x: 0
            y: 250
            text: "Mon, Jan 1"

        # Day of week at top
        - label:
            id: vclock_day_top
            align: TOP_MID
            text_font: montserrat_24
            text_color: my_gray
            x: 0
            y: 20
            text: "Monday"
        - obj:
            id: nav_button_vclock
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Vertical Clock page nav button PRESSED!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms
    - id: AirQ_page
      bg_color: my_black
      #bg_opa: COVER
      scrollbar_mode: "OFF"
      on_load:
        - script.execute: page_transition_cleanup
        - lambda: |-
            id(current_page_index) = 1;  // AirQ_page
            id(time_update_last_text).clear();
        - script.execute: time_update
        # Immediately update WiFi indicator when page loads
        - if:
            condition:
              wifi.connected:
            then:
              - lvgl.widget.update:
                  id: wifi_stat
                  text_color: my_green
              - lambda: 'id(wifi_stat_connected_state) = true;'
            else:
              - lvgl.widget.update:
                  id: wifi_stat
                  text_color: my_red
              - lambda: 'id(wifi_stat_connected_state) = false;'
      widgets:
        - image:
            id: ym_image          
            src: ym_logo
            align: CENTER
            x: 80
            y: -309
        - label:
            id: timeVal
            align: LEFT_MID
            text_font: montserrat_18
            text_color: my_white
            x: 2
            y: -309
            text: "00:00AM"
        - label:
            id: wifi_stat
            align: CENTER
            text_font: montserrat_18
            text_color: my_gray
            x: 42
            y: -309
            text: "\uF1EB"
      # AQI box
        - obj:
            id: aqi_widget
            #align: TOP_MID
            x: 0
            y: 24
            width: 180
            height: 42
            bg_color: 0x76fa76
            border_width: 0
        - label:
            id: aqi_label
            align: LEFT_MID
            text_font: montserrat_28
            text_color: my_black
            long_mode: WRAP
            x: 2
            y: -275
            text: "AQI:"
        - label:
            id: aqi_value
            align: LEFT_MID
            text_font: montserrat_28
            text_color: my_black
            long_mode: WRAP
            x: 90
            y: -275
            text: "000"                              
      # Temperature box
        - label:
            id: temperature_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -246
            text: "TEMP:"               
        - label:
            id: temperature_value
            align: CENTER
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: 0
            y: -234
            text: "000.0" 
        - label:
            id: temperature_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -8
            y: -234
            text: "\u00B0F"                     
        - line:
            points:
              - 0, 106
              - 180, 106
            line_width: 1
            line_color: 0x00dfff
      # CO2 box
        - label:
            id: co2_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -205
            text: "CO2:"               
        - label:
            id: co2_value
            align: CENTER
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: 0
            y: -193
            text: "0000" 
        - label:
            id: co2_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: -193
            text: "PPM"                     
        - line:
            points:
              - 0, 147
              - 180, 147
            line_width: 1
            line_color: 0x00dfff                              
      # PM1 box
        - label:
            id: pm1_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -164
            text: "PM1:"               
        - label:
            id: pm1_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: -152
            text: "000.0" 
        - label:
            id: pm1_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: -152
            text: "ug/m3"                     
        - line:
            points:
              - 0, 188
              - 180, 188
            line_width: 1
            line_color: 0x00dfff             
      # PM2.5 box
        - label:
            id: pm25_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -123
            text: "PM2.5:"               
        - label:
            id: pm25_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: -111
            text: "000.0" 
        - label:
            id: pm25_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: -111
            text: "ug/m3"                     
        - line:
            points:
              - 0, 229
              - 180, 229
            line_width: 1
            line_color: 0x00dfff              
      # PM4 box
        - label:
            id: pm4_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -82
            text: "PM4:"               
        - label:
            id: pm4_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: -70
            text: "000.0" 
        - label:
            id: pm4_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: -70
            text: "ug/m3"                     
        - line:
            points:
              - 0, 270
              - 180, 270
            line_width: 1
            line_color: 0x00dfff 
      # PM10 box
        - label:
            id: pm10_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -41
            text: "PM10:"               
        - label:
            id: pm10_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: -29
            text: "000.0" 
        - label:
            id: pm10_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: -29
            text: "ug/m3"                     
        - line:
            points:
              - 0, 311
              - 180, 311
            line_width: 1
            line_color: 0x00dfff
      # VOC box
        - label:
            id: voc_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 0
            text: "VOC:"               
        - label:
            id: voc_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 12
            text: "000.0"               
        - label:
            id: voc_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 12
            text: "IDX"                     
        - line:
            points:
              - 0, 352
              - 180, 352
            line_width: 1
            line_color: 0x00dfff
      # CO box
        - label:
            id: co_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 41
            text: "CO:"               
        - label:
            id: co_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 53
            text: "000.0" 
        - label:
            id: co_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 53
            text: "PPM"                     
        - line:
            points:
              - 0, 393
              - 180, 393
            line_width: 1
            line_color: 0x00dfff
      # Ethanol box
        - label:
            id: ethanol_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: SCROLL
            width: 40
            x: 2
            y: 82
            text: "C2H5OH:"           
        - label:
            id: ethanol_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 94
            text: "000.0" 
        - label:
            id: ethanol_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 94
            text: "PPM"                     
        - line:
            points:
              - 0, 434
              - 180, 434
            line_width: 1
            line_color: 0x00dfff
      # Hydrogen box
        - label:
            id: h2_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 124
            text: "H2:"              
        - label:
            id: h2_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 135
            text: "000.0" 
        - label:
            id: h2_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 135
            text: "PPM"                     
        - line:
            points:
              - 0, 475
              - 180, 475
            line_width: 1
            line_color: 0x00dfff
      # NO2 box
        - label:
            id: no2_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 165
            text: "NO2:"              
        - label:
            id: no2_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 176
            text: "000.0" 
        - label:
            id: no2_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 176
            text: "PPM"                     
        - line:
            points:
              - 0, 516
              - 180, 516
            line_width: 1
            line_color: 0x00dfff
      # NH3 box
        - label:
            id: nh3_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 206
            text: "NH3:"              
        - label:
            id: nh3_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 217
            text: "000.0" 
        - label:
            id: nh3_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 217
            text: "PPM"                     
        - line:
            points:
              - 0, 557
              - 180, 557
            line_width: 1
            line_color: 0x00dfff
      # CH4 box
        - label:
            id: ch4_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 247
            text: "CH4:"              
        - label:
            id: ch4_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 258
            text: "000.0" 
        - label:
            id: ch4_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 258
            text: "PPM"                     
        - line:
            points:
              - 0, 598
              - 180, 598
            line_width: 1
            line_color: 0x00dfff
      # RH box
        - label:
            id: rh_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 287
            text: "RH:"              
        - label:
            id: rh_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 299
            text: "000.0" 
        - label:
            id: rh_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 299
            text: "%"
        - obj:
            id: nav_button_AirQ
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "AirQ page nav button PRESSED!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms
    - id: wifi_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      on_load:
        - script.execute: page_transition_cleanup
        - lambda: 'id(current_page_index) = 2;'  # wifi_page
      widgets:
        - label:
            text: "WiFi & VPN \nStatistics"
            align: CENTER
            x: 0
            y: -300
            text_font: montserrat_20
            text_color: my_white
            text_align: CENTER
        - label:
            id: wifi_ssid_label
            text: "SSID: ...\n"
            align: LEFT_MID
            x: 10
            y: -250
            text_font: montserrat_18
            text_color: my_white
        - label:
            id: wifi_signal_label
            text: "Signal: ..."
            align: LEFT_MID
            x: 10
            y: -230
            text_font: montserrat_18
            text_color: my_white
        - bar:
            id: wifi_signal_bar
            align: CENTER
            x: 0
            y: -200
            width: 160
            height: 10
            min_value: -100
            max_value: -30
            value: -100
            bg_color: my_gray
            indicator:
              bg_grad: wifi_signal_gradient
        
        - label:
            id: wifi_ip_label
            text: "IP: ..."
            align: LEFT_MID
            x: 10
            y: -175
            text_font: montserrat_18
            text_color: my_white
        - label:
            text: "WireGuard"
            align: CENTER
            x: 0
            y: -100
            text_font: montserrat_20
            text_color: my_teal
        - label:
            id: wg_status_label
            text: "Status: Disabled"
            align: LEFT_MID
            x: 10
            y: -50
            text_font: montserrat_18
            text_color: my_gray
        - label:
            id: wg_address_label
            text: "VPN IP: ..."
            align: LEFT_MID
            x: 10
            y: 0
            text_font: montserrat_18
            text_color: my_white
        - label:
            id: wg_endpoint_label
            text: "Endpoint: ..."
            align: LEFT_MID
            x: 10
            y: 50
            text_font: montserrat_18
            text_color: my_white
        - label:
            id: wg_handshake_label
            text: "Last Handshake: ..."
            align: LEFT_MID
            x: 10
            y: 125
            text_font: montserrat_18
            text_color: my_white
            text_align: LEFT
        - obj:
            id: nav_button_wifi
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "WiFi page nav button PRESSED!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms
    - id: weather_forecast_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      on_load:
        - script.execute: page_transition_cleanup
        - lambda: |-
            id(current_page_index) = 3;  // weather_forecast_page
            id(weather_last_condition).clear();
        - script.execute: update_weather_icon_color
      widgets:
        # Large weather condition icon at top
        - label:
            text: "\U000F14E4"
            id: lbl_weather_forecast_condition_icon
            text_font: icons_100
            text_align: CENTER
            text_color: my_white
            align: TOP_MID
            x: 0
            y: 10

        # Condition name below icon
        - label:
            text: "Unknown"
            id: lbl_weather_forecast_condition_name
            text_align: CENTER
            text_font: montserrat_20
            text_color: my_white
            align: TOP_MID
            x: 0
            y: 120

        # Semicircle meter gauge for apparent temperature
        - obj:
            align: CENTER
            x: 0
            y: 100
            width: 180
            height: 180
            bg_color: 0x000000
            border_width: 0
            pad_all: 10
            widgets:
              - meter:
                  id: weather_temp_gauge
                  height: 100%
                  width: 100%
                  border_width: 0
                  align: CENTER
                  bg_opa: TRANSP
                  scales:
                    - range_from: 0
                      range_to: 100
                      angle_range: 180
                      rotation: 180
                      ticks:
                        count: 51
                        width: 2
                        length: 10
                        color: 0x404040
                      indicators:
                        - tick_style:
                            start_value: 0
                            end_value: 100
                            color_start: 0x0099FF
                            color_end: 0xFF6600
                    - range_from: 0
                      range_to: 100
                      angle_range: 180
                      rotation: 180
                      ticks:
                        count: 0
                      indicators:
                        - line:
                            id: weather_temp_needle
                            width: 8
                            r_mod: 2
                            value: 50
                            color: 0xFF0000
              - obj:
                  height: 100
                  width: 100
                  radius: 50
                  align: CENTER
                  border_width: 0
                  bg_color: 0x000000

        # Current apparent temperature in center of gauge
        - label:
            text: "--°"
            id: lbl_weather_today_tempap
            text_align: CENTER
            text_font: montserrat_28
            text_color: my_white
            align: CENTER
            x: 0
            y: 120

        # "Feels Like" label above temp
        - label:
            text: "Feels Like"
            text_align: CENTER
            text_font: montserrat_14
            text_color: my_gray
            align: CENTER
            x: 0
            y: 95

        # Low temp stacked above gauge
        - label:
            text: "L: --°"
            id: lbl_weather_forecast_templo
            text_align: CENTER
            text_font: montserrat_28
            text_color: my_teal
            align: CENTER
            x: 0
            y: -35

        # High temp stacked above low temp
        - label:
            text: "H: --°"
            id: lbl_weather_forecast_temphi
            text_align: CENTER
            text_font: montserrat_28
            text_color: my_red
            align: CENTER
            x: 0
            y: -70

        # Today precipitation amt
        - label:
            text: "Amt Today: -- in"
            id: lbl_weather_precipitation_today
            text_align: CENTER
            text_font: montserrat_18
            text_color: my_teal
            align: BOTTOM_MID
            x: 0
            y: -80

        # Precipitation Chnace
        - label:
            text: "Chance: --%"
            id: lbl_weather_today_dailyprecipprob
            text_align: CENTER
            text_font: montserrat_18
            text_color: my_teal
            align: BOTTOM_MID
            x: 0
            y: -55

        # Current temperature at bottom
        - label:
            text: "Now:"
            text_align: CENTER
            text_font: montserrat_14
            text_color: my_gray
            align: BOTTOM_MID
            x: 0
            y: -30

        - label:
            text: "--.- °C"
            id: lbl_weather_today_outdoor_temp
            text_align: CENTER
            text_font: montserrat_20
            text_color: my_white
            align: BOTTOM_MID
            x: 0
            y: -5
        - obj:
            id: nav_button_weather
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Weather page nav button PRESSED!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms
    - id: hourly_forecast_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      on_load:
        - script.execute: page_transition_cleanup
        - lambda: 'id(current_page_index) = 4;'  # hourly_forecast_page
      widgets:
        # Page Header
        - label:
            text: "6-Hour Forecast"
            align: TOP_MID
            y: 5
            text_font: montserrat_18
            text_color: my_white
            text_align: CENTER

        # Hour 1 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 35
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 8
            pad_all: 6
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 2
            widgets:
              - label:
                  id: lbl_hourly_hour1_header
                  text: "Hour +1"
                  text_font: montserrat_14
                  text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        id: lbl_hourly_hour1_icon
                        text: "--"
                        text_font: icons_40
                        text_color: my_white
                    - label:
                        id: lbl_hourly_hour1_temp
                        text: "--°"
                        text_font: montserrat_24
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Feels:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour1_feels
                        text: "--°"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Humid:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour1_humid
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Precip:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour1_precip
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Amt:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour1_precip_amt
                        text: "-- in"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Pressure:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour1_pressure
                        text: "-- mb"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "UV:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour1_uv
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Wind:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour1_wind
                        text: "-- mph"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Direction:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour1_wind_dir
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white

        # Hour 2 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 245
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 8
            pad_all: 6
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 2
            widgets:
              - label:
                  id: lbl_hourly_hour2_header
                  text: "Hour +2"
                  text_font: montserrat_14
                  text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        id: lbl_hourly_hour2_icon
                        text: "--"
                        text_font: icons_40
                        text_color: my_white
                    - label:
                        id: lbl_hourly_hour2_temp
                        text: "--°"
                        text_font: montserrat_24
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Feels:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour2_feels
                        text: "--°"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Humid:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour2_humid
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Precip:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour2_precip
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Amt:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour2_precip_amt
                        text: "-- in"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Pressure:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour2_pressure
                        text: "-- mb"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "UV:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour2_uv
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Wind:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour2_wind
                        text: "-- mph"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Direction:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour2_wind_dir
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white

        # Hour 3 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 455
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 8
            pad_all: 6
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 2
            widgets:
              - label:
                  id: lbl_hourly_hour3_header
                  text: "Hour +3"
                  text_font: montserrat_14
                  text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        id: lbl_hourly_hour3_icon
                        text: "--"
                        text_font: icons_40
                        text_color: my_white
                    - label:
                        id: lbl_hourly_hour3_temp
                        text: "--°"
                        text_font: montserrat_24
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Feels:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour3_feels
                        text: "--°"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Humid:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour3_humid
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Precip:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour3_precip
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Amt:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour3_precip_amt
                        text: "-- in"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Pressure:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour3_pressure
                        text: "-- mb"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "UV:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour3_uv
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Wind:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour3_wind
                        text: "-- mph"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Direction:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour3_wind_dir
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white

        # Center navigation button - click to go to hours 4-6
        - obj:
            id: nav_button_hourly_center
            align: CENTER
            width: 150
            height: 150
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Hourly page 1 CENTER button PRESSED - going to page 2!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.show:
                  id: hourly_forecast_page_2
                  animation: OUT_LEFT
                  time: 300ms

        # Top-right navigation button - normal page rotation
        - obj:
            id: nav_button_hourly
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Hourly Forecast page nav button PRESSED!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms

    # Hourly Forecast Page 2 - Hours 4-6
    - id: hourly_forecast_page_2
      skip: true
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      on_load:
        - script.execute: page_transition_cleanup
        - lambda: 'id(current_page_index) = 4;'  # Same as hourly_forecast_page
      widgets:
        # Page Header
        - label:
            text: "6-Hour Forecast"
            align: TOP_MID
            y: 5
            text_font: montserrat_18
            text_color: my_white
            text_align: CENTER

        # Hour 4 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 35
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 8
            pad_all: 6
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 2
            widgets:
              - label:
                  id: lbl_hourly_hour4_header
                  text: "Hour +4"
                  text_font: montserrat_14
                  text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        id: lbl_hourly_hour4_icon
                        text: "--"
                        text_font: icons_40
                        text_color: my_white
                    - label:
                        id: lbl_hourly_hour4_temp
                        text: "--°"
                        text_font: montserrat_24
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Feels:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour4_feels
                        text: "--°"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Humid:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour4_humid
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Precip:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour4_precip
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Amt:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour4_precip_amt
                        text: "-- in"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Pressure:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour4_pressure
                        text: "-- mb"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "UV:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour4_uv
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Wind:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour4_wind
                        text: "-- mph"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Direction:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour4_wind_dir
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white

        # Hour 5 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 245
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 8
            pad_all: 6
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 2
            widgets:
              - label:
                  id: lbl_hourly_hour5_header
                  text: "Hour +5"
                  text_font: montserrat_14
                  text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        id: lbl_hourly_hour5_icon
                        text: "--"
                        text_font: icons_40
                        text_color: my_white
                    - label:
                        id: lbl_hourly_hour5_temp
                        text: "--°"
                        text_font: montserrat_24
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Feels:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour5_feels
                        text: "--°"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Humid:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour5_humid
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Precip:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour5_precip
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Amt:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour5_precip_amt
                        text: "-- in"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Pressure:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour5_pressure
                        text: "-- mb"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "UV:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour5_uv
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Wind:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour5_wind
                        text: "-- mph"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Direction:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour5_wind_dir
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white

        # Hour 6 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 455
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 8
            pad_all: 6
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 2
            widgets:
              - label:
                  id: lbl_hourly_hour6_header
                  text: "Hour +6"
                  text_font: montserrat_14
                  text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        id: lbl_hourly_hour6_icon
                        text: "--"
                        text_font: icons_40
                        text_color: my_white
                    - label:
                        id: lbl_hourly_hour6_temp
                        text: "--°"
                        text_font: montserrat_24
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Feels:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour6_feels
                        text: "--°"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Humid:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour6_humid
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Precip:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour6_precip
                        text: "--%"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Amt:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour6_precip_amt
                        text: "-- in"
                        text_font: montserrat_10
                        text_color: my_teal
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Pressure:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour6_pressure
                        text: "-- mb"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "UV:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour6_uv
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Wind:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour6_wind
                        text: "-- mph"
                        text_font: montserrat_10
                        text_color: my_white
              - obj:
                  width: 100%
                  height: SIZE_CONTENT
                  bg_opa: 0
                  border_width: 0
                  pad_all: 0
                  layout:
                    type: flex
                    flex_flow: row
                    flex_align_main: SPACE_BETWEEN
                  widgets:
                    - label:
                        text: "Direction:"
                        text_font: montserrat_10
                        text_color: my_gray
                    - label:
                        id: lbl_hourly_hour6_wind_dir
                        text: "--"
                        text_font: montserrat_10
                        text_color: my_white

        # Center navigation button - click to go back to hours 1-3
        - obj:
            id: nav_button_hourly_page2_center
            align: CENTER
            width: 150
            height: 150
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Hourly page 2 CENTER button PRESSED - going to page 1!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.show:
                  id: hourly_forecast_page
                  animation: OUT_RIGHT
                  time: 300ms

        # Top-right navigation button - normal page rotation
        - obj:
            id: nav_button_hourly_page2
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Hourly Forecast page 2 nav button PRESSED!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms

    - id: daily_forecast_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      on_load:
        - script.execute: page_transition_cleanup
        - lambda: 'id(current_page_index) = 5;'  # daily_forecast_page
      widgets:
        # Page Header
        - label:
            text: "9-Day Forecast"
            align: TOP_MID
            y: 5
            text_font: montserrat_18
            text_color: my_white
            text_align: CENTER

        # Day 2 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 40
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 12
            pad_all: 12
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 6
            widgets:
              - label:
                  id: lbl_forecast_day2_header
                  text: "Day +2 (--/--)"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day2_icon
                  text: "--"
                  text_font: icons_80
                  text_color: my_white
              - label:
                  id: lbl_forecast_day2_condition
                  text: "---"
                  text_font: montserrat_18
                  text_color: my_white
                  long_mode: SCROLL_CIRCULAR
              - label:
                  id: lbl_forecast_day2_temps
                  text: "H:--° L:--°"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day2_precip_prob
                  text: "Rain: --%"
                  text_font: montserrat_16
                  text_color: my_white

        # Day 3 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 340
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 12
            pad_all: 12
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 6
            widgets:
              - label:
                  id: lbl_forecast_day3_header
                  text: "Day +3 (--/--)"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day3_icon
                  text: "--"
                  text_font: icons_80
                  text_color: my_white
              - label:
                  id: lbl_forecast_day3_condition
                  text: "---"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day3_temps
                  text: "H:--° L:--°"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day3_precip_prob
                  text: "Rain: --%"
                  text_font: montserrat_16
                  text_color: my_white

        # Navigation button to access extended forecast (Days 4-10)
        - label:
            text: "More >"
            align: BOTTOM_MID
            y: -5
            text_font: montserrat_18
            text_color: my_gray
            text_align: CENTER

        - obj:
            id: nav_button_extended_forecast
            align: BOTTOM_MID
            x: 0
            y: 0
            width: 100
            height: 60
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Extended forecast 'More' button PRESSED!"
              - lvgl.page.show:
                  id: forecast_days_4_5_page
                  animation: OUT_LEFT
                  time: 300ms

        - obj:
            id: nav_button_forecast
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "3-Day Forecast page nav button PRESSED!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms
    

      # Extended Forecast Pages (Days 4-10)
    - id: forecast_days_4_5_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      skip: true
      on_load:
        - script.execute: page_transition_cleanup
      widgets:
        - label:
            text: "Extended Forecast"
            align: TOP_MID
            y: 5
            text_font: montserrat_18
            text_color: my_white
            text_align: CENTER

        # Day 4 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 40
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 12
            pad_all: 12
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 6
            widgets:
              - label:
                  id: lbl_forecast_day4_header
                  text: "Day +4 (--/--)"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day4_icon
                  text: "--"
                  text_font: icons_80
                  text_color: my_white
              - label:
                  id: lbl_forecast_day4_condition
                  text: "---"
                  text_font: montserrat_18
                  text_color: my_white
                  long_mode: SCROLL_CIRCULAR
              - label:
                  id: lbl_forecast_day4_temps
                  text: "H:--° L:--°"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day4_precip_prob
                  text: "Rain: --%"
                  text_font: montserrat_16
                  text_color: my_white

        # Day 5 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 340
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 12
            pad_all: 12
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 6
            widgets:
              - label:
                  id: lbl_forecast_day5_header
                  text: "Day +5 (--/--)"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day5_icon
                  text: "--"
                  text_font: icons_80
                  text_color: my_white
              - label:
                  id: lbl_forecast_day5_condition
                  text: "---"
                  text_font: montserrat_18
                  text_color: my_white
                  long_mode: SCROLL_CIRCULAR
              - label:
                  id: lbl_forecast_day5_temps
                  text: "H:--° L:--°"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day5_precip_prob
                  text: "Rain: --%"
                  text_font: montserrat_16
                  text_color: my_white

        # Top-right button for main page navigation
        - obj:
            id: nav_button_top_45
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Days 4-5 top-right button PRESSED!"
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms

        - label:
            text: "More >"
            align: BOTTOM_MID
            y: -5
            text_font: montserrat_18
            text_color: my_gray
            text_align: CENTER

        # # Navigation button (center of screen) - must be LAST to render on top
        # - obj:
        #     id: nav_button_forecast_45
        #     align: CENTER
        #     x: 0
        #     y: 0
        #     width: 150
        #     height: 150
        #     bg_opa: 0
        #     border_width: 0
        #     clickable: true
        #     on_press:
        #       - logger.log: "Days 4-5 CENTER button PRESSED - going to 6-7!"
        #       - lvgl.page.show:
        #           id: forecast_days_6_7_page
        #           animation: OUT_LEFT
        #           time: 300ms

        # Navigation button (bottom of screen) - must be LAST to render on top
        - obj:
            id: nav_button_extended_forecast_45
            align: BOTTOM_MID
            x: 0
            y: 0
            width: 100
            height: 60
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Extended forecast 'More' button on 4-5 PRESSED! going to 6-7!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.show:
                  id: forecast_days_6_7_page
                  animation: OUT_LEFT
                  time: 300ms

    - id: forecast_days_6_7_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      skip: true
      on_load:
        - script.execute: page_transition_cleanup
      widgets:
        - label:
            text: "Extended Forecast"
            align: TOP_MID
            y: 5
            text_font: montserrat_18
            text_color: my_white
            text_align: CENTER

        # Day 6 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 40
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 12
            pad_all: 12
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 6
            widgets:
              - label:
                  id: lbl_forecast_day6_header
                  text: "Day +6 (--/--)"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day6_icon
                  text: "--"
                  text_font: icons_80
                  text_color: my_white
              - label:
                  id: lbl_forecast_day6_condition
                  text: "---"
                  text_font: montserrat_18
                  text_color: my_white
                  long_mode: SCROLL_CIRCULAR
              - label:
                  id: lbl_forecast_day6_temps
                  text: "H:--° L:--°"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day6_precip_prob
                  text: "Rain: --%"
                  text_font: montserrat_16
                  text_color: my_white

        # Day 7 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 340
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 12
            pad_all: 12
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 6
            widgets:
              - label:
                  id: lbl_forecast_day7_header
                  text: "Day +7 (--/--)"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day7_icon
                  text: "--"
                  text_font: icons_80
                  text_color: my_white
              - label:
                  id: lbl_forecast_day7_condition
                  text: "---"
                  text_font: montserrat_18
                  text_color: my_white
                  long_mode: SCROLL_CIRCULAR
              - label:
                  id: lbl_forecast_day7_temps
                  text: "H:--° L:--°"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day7_precip_prob
                  text: "Rain: --%"
                  text_font: montserrat_16
                  text_color: my_white

        # Top-right button for main page navigation
        - obj:
            id: nav_button_top_67
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Days 6-7 top-right button PRESSED!"
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms

        - label:
            text: "More >"
            align: BOTTOM_MID
            y: -5
            text_font: montserrat_18
            text_color: my_gray
            text_align: CENTER

        # # Navigation button (center of screen) - must be LAST to render on top
        # - obj:
        #     id: nav_button_forecast_67
        #     align: CENTER
        #     x: 0
        #     y: 0
        #     width: 150
        #     height: 150
        #     bg_opa: 0
        #     border_width: 0
        #     clickable: true
        #     on_press:
        #       - logger.log: "Days 6-7 CENTER button PRESSED - going to 8-9!"
        #       - lvgl.page.show:
        #           id: forecast_days_8_9_page
        #           animation: OUT_LEFT
        #           time: 300ms

        # Navigation button (bottom of screen) - must be LAST to render on top
        - obj:
            id: nav_button_extended_forecast_67
            align: BOTTOM_MID
            x: 0
            y: 0
            width: 100
            height: 60
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Extended forecast 'More' button on 6-7 PRESSED! going to 8-9!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.show:
                  id: forecast_days_8_9_page
                  animation: OUT_LEFT
                  time: 300ms

    - id: forecast_days_8_9_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      skip: true
      on_load:
        - script.execute: page_transition_cleanup
      widgets:
        - label:
            text: "Extended Forecast"
            align: TOP_MID
            y: 5
            text_font: montserrat_18
            text_color: my_white
            text_align: CENTER

        # Day 8 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 40
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 12
            pad_all: 12
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 6
            widgets:
              - label:
                  id: lbl_forecast_day8_header
                  text: "Day +8 (--/--)"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day8_icon
                  text: "--"
                  text_font: icons_80
                  text_color: my_white
              - label:
                  id: lbl_forecast_day8_condition
                  text: "---"
                  text_font: montserrat_18
                  text_color: my_white
                  long_mode: SCROLL_CIRCULAR
              - label:
                  id: lbl_forecast_day8_temps
                  text: "H:--° L:--°"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day8_precip_prob
                  text: "Rain: --%"
                  text_font: montserrat_16
                  text_color: my_white

        # Day 9 Card
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: TOP_MID
            y: 340
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 12
            pad_all: 12
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 6
            widgets:
              - label:
                  id: lbl_forecast_day9_header
                  text: "Day +9 (--/--)"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day9_icon
                  text: "--"
                  text_font: icons_80
                  text_color: my_white
              - label:
                  id: lbl_forecast_day9_condition
                  text: "---"
                  text_font: montserrat_18
                  text_color: my_white
                  long_mode: SCROLL_CIRCULAR
              - label:
                  id: lbl_forecast_day9_temps
                  text: "H:--° L:--°"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day9_precip_prob
                  text: "Rain: --%"
                  text_font: montserrat_16
                  text_color: my_white

        # Top-right button for main page navigation
        - obj:
            id: nav_button_top_89
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Days 8-9 top-right button PRESSED!"
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms

        - label:
            text: "More >"
            align: BOTTOM_MID
            y: -5
            text_font: montserrat_18
            text_color: my_gray
            text_align: CENTER

        # # Navigation button (center of screen) - must be LAST to render on top
        # - obj:
        #     id: nav_button_forecast_89
        #     align: CENTER
        #     x: 0
        #     y: 0
        #     width: 150
        #     height: 150
        #     bg_opa: 0
        #     border_width: 0
        #     clickable: true
        #     on_press:
        #       - logger.log: "Days 8-9 CENTER button PRESSED - going to Day 10!"
        #       - lvgl.page.show:
        #           id: forecast_day_10_page
        #           animation: OUT_LEFT
        #           time: 300ms

         # Navigation button (bottom of screen) - must be LAST to render on top
        - obj:
            id: nav_button_extended_forecast_89
            align: BOTTOM_MID
            x: 0
            y: 0
            width: 100
            height: 60
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Extended forecast 'More' button on 8-9 PRESSED! going to 10!"
              - lambda: |-
                  ESP_LOGI("touch", "Navigation button touched");
                  id(last_auto_rotation_time) = millis();
                  ESP_LOGD("touch", "Auto-rotation timer reset");
              - lvgl.page.show:
                  id: forecast_day_10_page
                  animation: OUT_LEFT
                  time: 300ms

    - id: forecast_day_10_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      skip: true
      on_load:
        - script.execute: page_transition_cleanup
      widgets:
        - label:
            text: "Extended Forecast"
            align: TOP_MID
            y: 5
            text_font: montserrat_18
            text_color: my_white
            text_align: CENTER

        # Day 10 Card (centered on page)
        - obj:
            width: 170
            height: SIZE_CONTENT
            align: CENTER
            y: 0
            bg_color: 0x101010
            bg_opa: COVER
            border_width: 0
            radius: 12
            pad_all: 12
            scrollbar_mode: "OFF"
            layout:
              type: flex
              flex_flow: column
              pad_row: 6
            widgets:
              - label:
                  id: lbl_forecast_day10_header
                  text: "Day +10 (--/--)"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day10_icon
                  text: "--"
                  text_font: icons_80
                  text_color: my_white
              - label:
                  id: lbl_forecast_day10_condition
                  text: "---"
                  text_font: montserrat_18
                  text_color: my_white
                  long_mode: SCROLL_CIRCULAR
              - label:
                  id: lbl_forecast_day10_temps
                  text: "H:--° L:--°"
                  text_font: montserrat_18
                  text_color: my_white
              - label:
                  id: lbl_forecast_day10_precip_prob
                  text: "Rain: --%"
                  text_font: montserrat_16
                  text_color: my_white

        # Navigation button (center bottom) - goes back to Days 2-3
        - obj:
            id: nav_button_forecast_10
            align: BOTTOM_MID
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Day 10 BOTTOM button PRESSED - going back to 3-day!"
              - lvgl.page.show:
                  id: daily_forecast_page
                  animation: OUT_RIGHT
                  time: 300ms

        # Top-right button for main page navigation
        - obj:
            id: nav_button_top_10
            align: TOP_RIGHT
            x: 0
            y: 0
            width: 100
            height: 100
            bg_opa: 0
            border_width: 0
            clickable: true
            on_press:
              - logger.log: "Day 10 top-right button PRESSED!"
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 300ms

text:
  - platform: lvgl
    name: weather_today_tempap
    internal: true
    widget: lbl_weather_today_tempap
    mode: text
  - platform: lvgl
    name: weather_today_outdoor_temp
    internal: true
    widget: lbl_weather_today_outdoor_temp
    mode: text

  # Daily Forecast Page - Day 2
  - platform: lvgl
    name: forecast_day2_header
    internal: true
    widget: lbl_forecast_day2_header
    mode: text
  - platform: lvgl
    name: forecast_day2_icon
    internal: true
    widget: lbl_forecast_day2_icon
    mode: text
  - platform: lvgl
    name: forecast_day2_condition
    internal: true
    widget: lbl_forecast_day2_condition
    mode: text
  - platform: lvgl
    name: forecast_day2_temps
    internal: true
    widget: lbl_forecast_day2_temps
    mode: text
  - platform: lvgl
    name: forecast_day2_precip_prob
    internal: true
    widget: lbl_forecast_day2_precip_prob
    mode: text

  # Daily Forecast Page - Day 3
  - platform: lvgl
    name: forecast_day3_header
    internal: true
    widget: lbl_forecast_day3_header
    mode: text
  - platform: lvgl
    name: forecast_day3_icon
    internal: true
    widget: lbl_forecast_day3_icon
    mode: text
  - platform: lvgl
    name: forecast_day3_condition
    internal: true
    widget: lbl_forecast_day3_condition
    mode: text
  - platform: lvgl
    name: forecast_day3_temps
    internal: true
    widget: lbl_forecast_day3_temps
    mode: text
  - platform: lvgl
    name: forecast_day3_precip_prob
    internal: true
    widget: lbl_forecast_day3_precip_prob
    mode: text

  # Daily Forecast Page - Day 4
  - platform: lvgl
    name: forecast_day4_header
    internal: true
    widget: lbl_forecast_day4_header
    mode: text
  - platform: lvgl
    name: forecast_day4_icon
    internal: true
    widget: lbl_forecast_day4_icon
    mode: text
  - platform: lvgl
    name: forecast_day4_condition
    internal: true
    widget: lbl_forecast_day4_condition
    mode: text
  - platform: lvgl
    name: forecast_day4_temps
    internal: true
    widget: lbl_forecast_day4_temps
    mode: text
  - platform: lvgl
    name: forecast_day4_precip_prob
    internal: true
    widget: lbl_forecast_day4_precip_prob
    mode: text
  
  # Daily Forecast Page - Day 5
  - platform: lvgl
    name: forecast_day5_header
    internal: true
    widget: lbl_forecast_day5_header
    mode: text
  - platform: lvgl
    name: forecast_day5_icon
    internal: true
    widget: lbl_forecast_day5_icon
    mode: text
  - platform: lvgl
    name: forecast_day5_condition
    internal: true
    widget: lbl_forecast_day5_condition
    mode: text
  - platform: lvgl
    name: forecast_day5_temps
    internal: true
    widget: lbl_forecast_day5_temps
    mode: text
  - platform: lvgl
    name: forecast_day5_precip_prob
    internal: true
    widget: lbl_forecast_day5_precip_prob
    mode: text

  # Daily Forecast Page - Day 6
  - platform: lvgl
    name: forecast_day6_header
    internal: true
    widget: lbl_forecast_day6_header
    mode: text
  - platform: lvgl
    name: forecast_day6_icon
    internal: true
    widget: lbl_forecast_day6_icon
    mode: text
  - platform: lvgl
    name: forecast_day6_condition
    internal: true
    widget: lbl_forecast_day6_condition
    mode: text
  - platform: lvgl
    name: forecast_day6_temps
    internal: true
    widget: lbl_forecast_day6_temps
    mode: text
  - platform: lvgl
    name: forecast_day6_precip_prob
    internal: true
    widget: lbl_forecast_day6_precip_prob
    mode: text

  # Daily Forecast Page - Day 7
  - platform: lvgl
    name: forecast_day7_header
    internal: true
    widget: lbl_forecast_day7_header
    mode: text
  - platform: lvgl
    name: forecast_day7_icon
    internal: true
    widget: lbl_forecast_day7_icon
    mode: text
  - platform: lvgl
    name: forecast_day7_condition
    internal: true
    widget: lbl_forecast_day7_condition
    mode: text
  - platform: lvgl
    name: forecast_day7_temps
    internal: true
    widget: lbl_forecast_day7_temps
    mode: text
  - platform: lvgl
    name: forecast_day7_precip_prob
    internal: true
    widget: lbl_forecast_day7_precip_prob
    mode: text

  # Daily Forecast Page - Day 8
  - platform: lvgl
    name: forecast_day8_header
    internal: true
    widget: lbl_forecast_day8_header
    mode: text
  - platform: lvgl
    name: forecast_day8_icon
    internal: true
    widget: lbl_forecast_day8_icon
    mode: text
  - platform: lvgl
    name: forecast_day8_condition
    internal: true
    widget: lbl_forecast_day8_condition
    mode: text
  - platform: lvgl
    name: forecast_day8_temps
    internal: true
    widget: lbl_forecast_day8_temps
    mode: text
  - platform: lvgl
    name: forecast_day8_precip_prob
    internal: true
    widget: lbl_forecast_day8_precip_prob
    mode: text

  # Daily Forecast Page - Day 9
  - platform: lvgl
    name: forecast_day9_header
    internal: true
    widget: lbl_forecast_day9_header
    mode: text
  - platform: lvgl
    name: forecast_day9_icon
    internal: true
    widget: lbl_forecast_day9_icon
    mode: text
  - platform: lvgl
    name: forecast_day9_condition
    internal: true
    widget: lbl_forecast_day9_condition
    mode: text
  - platform: lvgl
    name: forecast_day9_temps
    internal: true
    widget: lbl_forecast_day9_temps
    mode: text
  - platform: lvgl
    name: forecast_day9_precip_prob
    internal: true
    widget: lbl_forecast_day9_precip_prob
    mode: text

  # Daily Forecast Page - Day 10
  - platform: lvgl
    name: forecast_day10_header
    internal: true
    widget: lbl_forecast_day10_header
    mode: text
  - platform: lvgl
    name: forecast_day10_icon
    internal: true
    widget: lbl_forecast_day10_icon
    mode: text
  - platform: lvgl
    name: forecast_day10_condition
    internal: true
    widget: lbl_forecast_day10_condition
    mode: text
  - platform: lvgl
    name: forecast_day10_temps
    internal: true
    widget: lbl_forecast_day10_temps
    mode: text
  - platform: lvgl
    name: forecast_day10_precip_prob
    internal: true
    widget: lbl_forecast_day10_precip_prob
    mode: text


esphome:
  name: ${name}
  on_boot:
    - priority: 800  # Very early - before components load
      then:
        - delay: 50ms  # Brief delay for LVGL to initialize
        - lvgl.page.show: vertical_clock_page
        - logger.log: "Set initial page to Vertical Clock"
    - priority: -100
      then:
        - logger.log: "Boot sequence starting (priority -100)"
        - light.turn_off: rgb_light
        - delay: 1s  # Brief delay for LVGL to initialize
        - lambda: |-
            const std::string &choice = id(default_page_select_boot).state;
            if (choice == "WiFi") {
              id(default_page_index) = 2;  // wifi_page
            } else if (choice == "Weather") {
                id(default_page_index) = 3;  // weather_forecast_page
            } else if (choice == "Daily Forecast") {
              id(default_page_index) = 5;  // daily_forecast_page
            } else if (choice == "Vertical Clock") {
              id(default_page_index) = 0;  // vertical_clock_page
            } else {
              id(default_page_index) = 1;  // AirQ_page (default)
            }
        - logger.log:
            format: "Setting default page (index: %d)"
            args: ['id(default_page_index)']
        - if:
            condition:
              lambda: 'return id(default_page_index) == 0;'  # vertical_clock_page
            then:
              - logger.log: "Showing Vertical Clock page"
              - lvgl.page.show: vertical_clock_page
            else:
              - if:
                  condition:
                    lambda: 'return id(default_page_index) == 2;'  # wifi_page
                  then:
                    - logger.log: "Showing WiFi page"
                    - lvgl.page.show: wifi_page
                  else:
                  - if:
                      condition:
                        lambda: 'return id(default_page_index) == 3;'  # weather_forecast_page
                      then:
                        - logger.log: "Showing Weather page"
                        - lvgl.page.show: weather_forecast_page
                      else:
                        - if:
                            condition:
                              lambda: 'return id(default_page_index) == 4 || id(default_page_index) == 5;'  # hourly/daily forecast
                            then:
                              - logger.log: "Showing Daily Forecast page"
                              - lvgl.page.show: daily_forecast_page
                            else:
                              - logger.log: "Showing AirQ page"
                              - lvgl.page.show: AirQ_page
        - logger.log: "Boot sequence complete"