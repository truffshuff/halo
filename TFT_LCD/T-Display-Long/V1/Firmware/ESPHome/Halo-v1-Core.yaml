#Define Project
substitutions:
  name: halo
  version: "25.9.8.1"
  device_description: ${name} - v${version}.

psram:
  mode: octal
  # speed: 120MHz

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  cpu_frequency: 240MHz
  
  framework:
    type: esp-idf
    advanced:
      enable_idf_experimental_features: true
    #platform_version: 6.9.0
    #version: 5.3.1

#esp32_improv:
#  authorizer: none

external_components:
  - source: github://truffshuff/esphome-components
    components: [axs15231, sy6970]

  - source: github://pr#7770 # RMT driver, remove rmt_channel when using esp-idf
    components: [ remote_base, remote_receiver, remote_transmitter, esp32_rmt, esp32_rmt_led_strip ]
    refresh: 0s


spi:
  id: lily_spi
  type: quad
  clk_pin: 17
  data_pins:
    - 13
    - 18
    - 21
    - 14

captive_portal:

logger:
  level: DEBUG
  logs:
    http_request.idf: DEBUG

globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: temp_unit_changed
    type: bool
    initial_value: "true"
  - id: last_touch_time
    type: int
    initial_value: '0'
  - id: default_page_index
    type: int
    restore_value: yes
    initial_value: '0'
  - id: boot_complete
    type: bool
    restore_value: no
    initial_value: 'false'

switch:
  - platform: template
    name: "Startup Light Blink"
    id: startup_light_blink
    icon: mdi:lightbulb
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
  - platform: template
    name: "24h Clock Format"
    id: time_format
    icon: mdi:clock-digital
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    entity_category: "config"
  - platform: template
    name: "Enable WireGuard"
    id: wireguard_enabled
    icon: mdi:vpn
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - logger.log: "Switching to SNTP time source for WireGuard"
      - script.execute: time_update  # Switch to SNTP time display
      - delay: 500ms  # Brief delay to ensure SNTP is being used
      - wireguard.enable:
          id: wg0
      - logger.log: "WireGuard enabled"
    on_turn_off:
      - wireguard.disable:
          id: wg0
      - logger.log: "WireGuard disabled - switching to Home Assistant time source"
      - script.execute: time_update  # Switch to HA time display

select:
  - platform: template
    name: Display Temperature Unit
    id: display_temperature_unit
    entity_category: "Config"
    options:
     - "Fahrenheit"
     - "Celsius"
     - "Kelvin"
    initial_option: "Fahrenheit"
    restore_value: true
    optimistic: true
    on_value:
      - globals.set:
          id: temp_unit_changed
          value: "true"

  - platform: template
    name: LED Effect
    id: led_effect_select
    entity_category: "Config"
    options:
      - "None"
      - "Rainbow Effect With Custom Values"
      - "Addressable Rainbow"
      - "Color Wipe"
      - "Scan"
      - "Twinkle"
      - "Fireworks"
      - "Strobe"
      - "Random Twinkle"
      - "AQI Color"
    initial_option: "None"
    restore_value: true
    optimistic: true
    on_value:
      - lambda: |-
          // Don't apply effects during boot - let startup_light_blink handle it
          if (!id(boot_complete)) return;
          
          std::string effect = id(led_effect_select).state;
          if (effect == "None") {
            auto call = id(rgb_light).turn_off();
            call.perform();
          } else if (effect == "AQI Color") {
            float aqi = id(computed_halo_aqi).state;
            if (std::isnan(aqi) || aqi <= 50) {
              auto call = id(rgb_light).turn_off();
              call.perform();
            } else {
              Color color;
              if (aqi <= 100) color = Color(255, 255, 0); // yellow
              else if (aqi <= 150) color = Color(255, 165, 0); // orange
              else if (aqi <= 200) color = Color(255, 0, 0); // red
              else if (aqi <= 300) color = Color(128, 0, 128); // purple
              else color = Color(128, 0, 0); // maroon
              auto call = id(rgb_light).turn_on();
              call.set_rgb(color.red / 255.0f, color.green / 255.0f, color.blue / 255.0f);
              call.perform();
            }
          } else {
            auto call = id(rgb_light).turn_on();
            call.set_effect(effect);
            call.perform();
          }

  - platform: template
    name: Default Page
    id: default_page_select
    entity_category: "config"
    options:
      - "Main"
      - "WiFi"
      - "Weather"
    initial_option: "Main"
    restore_value: true
    optimistic: true
    on_value:
      - lambda: |-
          int idx = 0;
          if (id(default_page_select).state == "WiFi") idx = 1;
          else if (id(default_page_select).state == "Weather") idx = 2;
          id(default_page_index) = idx;

interval:
  - interval: 10s
    then:
      - logger.log: "10s interval: Starting WiFi and WireGuard status update"
      - if:
          condition:
            wifi.connected:
          then:
            - logger.log: "WiFi connected - updating display labels"
            - lvgl.widget.update:
                id: wifi_stat
                text_color: my_green
            - lvgl.widget.show:
                id: ym_image              
            - lvgl.label.update:
                id: wifi_signal_label
                text: !lambda |-
                  char buffer[32];
                  snprintf(buffer, sizeof(buffer), "Signal: %.0f dBm", id(wifi_signal_db).state);
                  return std::string(buffer);
            - lvgl.bar.update:
                id: wifi_signal_bar
                value: !lambda 'return id(wifi_signal_db).state;'
            - lvgl.label.update:
                id: wifi_ssid_label
                text: !lambda |-
                  return std::string("SSID: ") + esphome::wifi::global_wifi_component->wifi_ssid();
            - lvgl.label.update:
                id: wifi_ip_label
                text: !lambda |-
                  return std::string("IP: ") + esphome::wifi::global_wifi_component->get_ip_addresses()[0].str();
            # Update WireGuard status
            - lvgl.label.update:
                id: wg_status_label
                text: !lambda |-
                  if (id(wireguard_status).state) {
                    return std::string("Status: \nConnected");
                  } else {
                    return std::string("Status: \nDisconnected");
                  }
            - lvgl.widget.update:
                id: wg_status_label
                text_color: !lambda |-
                  if (id(wireguard_status).state) {
                    return id(my_green);
                  } else {
                    return id(my_gray);
                  }
            - lvgl.label.update:
                id: wg_address_label
                text: !lambda |-
                  if (id(wireguard_address_text).has_state()) {
                    return std::string("VPN IP: ") + id(wireguard_address_text).state;
                  } else {
                    return std::string("VPN IP: Not configured");
                  }
            - lvgl.label.update:
                id: wg_endpoint_label
                text: "Endpoint: \nConfigured"
            - logger.log: "Updating WireGuard handshake label"
            - lvgl.label.update:
                id: wg_handshake_label
                text: !lambda |-
                  ESP_LOGD("wg_handshake", "Lambda executing for handshake label");
                  if (!isnan(id(wireguard_handshake).state)) {
                    ESP_LOGD("wg_handshake", "Handshake value: %.0f", id(wireguard_handshake).state);
                    char buffer[128];
                    // The sensor returns seconds since epoch of last handshake
                    // Calculate seconds ago by subtracting from current time
                    auto current_time = id(sntp_time).now().timestamp;
                    int seconds_ago = current_time - (int)id(wireguard_handshake).state;

                    // Convert timestamp to ESPTime for formatting
                    auto handshake_time = ESPTime::from_epoch_local((int)id(wireguard_handshake).state);

                    char time_ago[32];
                    if (seconds_ago < 0) {
                      // If negative, just show the raw value
                      snprintf(time_ago, sizeof(time_ago), "%ds", (int)id(wireguard_handshake).state);
                    } else if (seconds_ago < 60) {
                      snprintf(time_ago, sizeof(time_ago), "%ds ago", seconds_ago);
                    } else if (seconds_ago < 3600) {
                      snprintf(time_ago, sizeof(time_ago), "%dm ago", seconds_ago / 60);
                    } else if (seconds_ago < 86400) {
                      snprintf(time_ago, sizeof(time_ago), "%dh ago", seconds_ago / 3600);
                    } else {
                      snprintf(time_ago, sizeof(time_ago), "%dd ago", seconds_ago / 86400);
                    }

                    // Format: "Handshake: \n5m ago @ \n\n14:34:56"
                    snprintf(buffer, sizeof(buffer), "Handshake: \n%s @\n\n%02d:%02d:%02d",
                            time_ago, handshake_time.hour, handshake_time.minute, handshake_time.second);
                    return std::string(buffer);
                  } else {
                    return std::string("Handshake: \nNever");
                  }
            - logger.log: "10s interval: WiFi and WireGuard update complete"
          else:
            - logger.log: "WiFi disconnected"
            - lvgl.widget.update:
                id: wifi_stat
                text_color: my_red

  - interval: 1s
    then:
      - script.execute: time_update  

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) < 30;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_on:
                id: rgb_light
                effect: "Addressable Rainbow"
            - lambda: 'id(cycleCounter) += 1;'

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) > 30;'
            - lambda: 'return id(cycleCounter) < 31;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_off:
                id: rgb_light
            - lambda: 'id(cycleCounter) += 1;'

  - interval: 5s
    then:
      - script.execute: update_weather_icon_color
  - interval: 1h
    then:
      - logger.log: "Requesting daily forecast..."
      - homeassistant.service:
          service: weather.get_forecasts
          data:
            entity_id: weather.hhut  # replace with your weather entity
            type: daily
          variables:
            forecast: |-
              return x;
      - lambda: |-
          if (forecast.size() > 0) {
            float temp = forecast[0]["temperature"].as<float>();
            id(todays_high).publish_state("High: " + to_string(temp) + "°C");
            ESP_LOGI("weather", "Today's high: %.1f °C", temp);
          } else {
            id(todays_high).publish_state("unknown");
          }

api:
  on_client_connected:
      - delay: 1s
      - lambda: 'id(cycleCounter) = 30;'
      - lambda: 'id(boot_complete) = true;'
      # Re-apply the saved LED effect selection after HA connects
      - delay: 2s
      - lambda: |-
          std::string effect = id(led_effect_select).state;
          if (effect == "None") {
            auto call = id(rgb_light).turn_off();
            call.perform();
          } else if (effect == "AQI Color") {
            float aqi = id(computed_halo_aqi).state;
            if (std::isnan(aqi) || aqi <= 50) {
              auto call = id(rgb_light).turn_off();
              call.perform();
            } else {
              Color color;
              if (aqi <= 100) color = Color(255, 255, 0);
              else if (aqi <= 150) color = Color(255, 165, 0);
              else if (aqi <= 200) color = Color(255, 0, 0);
              else if (aqi <= 300) color = Color(128, 0, 128);
              else color = Color(128, 0, 0);
              auto call = id(rgb_light).turn_on();
              call.set_rgb(color.red / 255.0f, color.green / 255.0f, color.blue / 255.0f);
              call.perform();
            }
          } else {
            auto call = id(rgb_light).turn_on();
            call.set_effect(effect);
            call.perform();
          }    
  services:
    #Co2 Calibration Service
    - service: calibrate_co2_value
      variables:
        co2_ppm: float
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda "return co2_ppm;"
            id: scd40
    - service: sen55_clean
      then:
        - sen5x.start_fan_autoclean: sen55
    - service: set_display_page
      variables:
        page_name: string
      then:
        - if:
            condition:
              lambda: 'return page_name == "main" || page_name == "Main";'
            then:
              - lvgl.page.show: main_page
            else:
              - if:
                  condition:
                    lambda: 'return page_name == "wifi" || page_name == "WiFi";'
                  then:
                    - lvgl.page.show: wifi_page
                  else:
                    - if:
                        condition:
                          lambda: 'return page_name == "weather" || page_name == "Weather";'
                        then:
                          - lvgl.page.show: weather_forecast_page
                        else:
                          - logger.log:
                              format: "Unknown page requested: %s"
                              args: ['page_name.c_str()']
                              level: WARN

i2c:
  - sda: 9
    scl: 48
    id: lily_i2c
  - sda: 15
    scl: 10
    id: touch_i2c

output:
  - platform: ledc
    pin: 1
    id: backlight
    frequency: 100Hz  #Datasheet suggests low-frequency PWM. Should prevent stability issues.
    
# sy6970:
#   i2c_id: touch_i2c
#   state_led_enable: false  # To turn off the blinking green status LED

display:
  - platform: qspi_dbi
    id: lily_display
    model: AXS15231
    spi_id: lily_spi
    dimensions:
      height: 640
      width: 180
    cs_pin: 12
    reset_pin: 16
    rotation: 0
    auto_clear_enabled: false

touchscreen:
  - platform: axs15231
    id: lily_touch
    display: lily_display
    i2c_id: touch_i2c
    interrupt_pin: GPIO11
    transform:
      mirror_x: false
      mirror_y: false
      swap_xy: false
    on_touch:
      - logger.log:
          format: "Touch detected at x=%d, y=%d"
          args: ['touch.x', 'touch.y']
      - lambda: |-
          auto now = millis();
          if (now - id(last_touch_time) < 500) {  // Debounce for 500ms
            ESP_LOGD("touch", "Touch ignored (debounce)");
            return;
          }
          id(last_touch_time) = now;
          ESP_LOGD("touch", "Touch accepted");
      - if:
          condition:
            lambda: 'return touch.y < 320;'
          then:
            - logger.log: "Swipe down - going to next page"
            - lvgl.page.next:
                animation: OUT_LEFT
                time: 300ms
          else:
            - logger.log: "Swipe up - going to previous page"
            - lvgl.page.previous:
                animation: OUT_RIGHT
                time: 300ms

web_server:
  port: 80

wireguard:
  id: wg0
  address: !secret wg_address  # Your WireGuard interface IP address (e.g., 10.0.0.2)
  netmask: !secret wg_netmask  # Your WireGuard netmask (e.g., 255.255.255.0)
  private_key: !secret wg_prikey
  peer_port: !secret wg_peerport  # Your WireGuard private key
  peer_endpoint: !secret wg_peerendpt  # Your WireGuard server IP (e.g., 1.2.3.4)
  peer_public_key: !secret wg_pubkey  # Your WireGuard server public key
  peer_preshared_key: !secret wg_shrdkey  # Optional: Your WireGuard preshared key
  peer_allowed_ips:
    - 192.168.1.0/24
    - 10.6.0.1/32
    - 10.6.0.2/32
  peer_persistent_keepalive: 25s
  # Optional: Only route specific traffic through WireGuard
  # allowed_ips:
  #   - 10.0.0.0/24  # Only route WireGuard subnet traffic
  # If commented out, all traffic will be routed through WireGuard (0.0.0.0/0)

image:
  - file: https://yashmulgaonkar.github.io/assets/YM.png
    id: ym_logo
    resize: 25x25
    type: RGB565
    transparency: alpha_channel

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: my_orange
    red: 100%
    green: 50%
    blue: 0%
  - id: my_teal
    red: 0%
    green: 100%
    blue: 100%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%

time:
  - platform: homeassistant
    id: ha_time
    on_time_sync:
      - script.execute: time_update
  - platform: sntp
    id: sntp_time
    timezone: America/New_York
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time_sync:
      - script.execute: time_update

script:
  - id: time_update
    then:
      - logger.log: "Executing time_update script"
      - lvgl.label.update:
          id: timeVal
          text: !lambda |-
            ESP_LOGD("time_update", "Updating time display");
            static char time_buf[17];
            // Use SNTP time when WireGuard is enabled, otherwise use Home Assistant time
            auto now = id(wireguard_enabled).state ? id(sntp_time).now() : id(ha_time).now();
            bool is_pm = now.hour >= 12;
            int hour_12 = now.hour % 12;
            if (hour_12 == 0) {
              hour_12 = 12; // 12 AM/PM should be displayed as 12, not 0
            }
            if(id(time_format).state) {
              snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
            }
            else {
              snprintf(time_buf, sizeof(time_buf), "%2d:%02d%s", hour_12, now.minute, is_pm ? "PM" : "AM");
            }
            return time_buf;
  - id: update_weather_icon_color
    then:
      - logger.log: "Updating weather icon color based on condition"
      - delay: 500ms
      - lambda: |-
          std::string condition = id(fr_cond_name).state;
          // Convert to lowercase for case-insensitive comparison
          std::transform(condition.begin(), condition.end(), condition.begin(), ::tolower);
          ESP_LOGD("weather_color", "Current condition: '%s'", condition.c_str());
      - lvgl.label.update:
          id: lbl_weather_forecast_condition_icon
          text_color: !lambda |-
            std::string condition = id(fr_cond_name).state;
            // Convert to lowercase for case-insensitive comparison
            std::transform(condition.begin(), condition.end(), condition.begin(), ::tolower);
            ESP_LOGD("weather_color", "Applying color for condition: '%s'", condition.c_str());

            if (condition.find("sunny") != std::string::npos ||
                condition.find("clear") != std::string::npos) {
              ESP_LOGD("weather_color", "Setting Gold color");
              return lv_color_hex(0xFFD700);  // Gold
            } else if (condition.find("cloudy") != std::string::npos ||
                       condition.find("overcast") != std::string::npos) {
              ESP_LOGD("weather_color", "Setting Dark Gray color");
              return lv_color_hex(0xA9A9A9);  // Dark gray
            } else if (condition.find("rainy") != std::string::npos ||
                       condition.find("pouring") != std::string::npos ||
                       condition.find("drizzle") != std::string::npos) {
              ESP_LOGD("weather_color", "Setting Royal Blue color");
              return lv_color_hex(0x4169E1);  // Royal blue
            } else if (condition.find("snowy") != std::string::npos ||
                       condition.find("sleet") != std::string::npos) {
              ESP_LOGD("weather_color", "Setting Gainsboro color");
              return lv_color_hex(0xDCDCDC);  // Gainsboro (light gray)
            } else if (condition.find("hail") != std::string::npos) {
              ESP_LOGD("weather_color", "Setting Sky Blue color");
              return lv_color_hex(0x87CEEB);  // Sky blue
            } else if (condition.find("lightning") != std::string::npos ||
                       condition.find("thunderstorm") != std::string::npos) {
              ESP_LOGD("weather_color", "Setting Deep Pink color");
              return lv_color_hex(0xFF1493);  // Deep pink (warning)
            } else if (condition.find("fog") != std::string::npos ||
                       condition.find("mist") != std::string::npos) {
              ESP_LOGD("weather_color", "Setting Light Steel Blue color");
              return lv_color_hex(0xB0C4DE);  // Light steel blue
            } else if (condition.find("windy") != std::string::npos) {
              ESP_LOGD("weather_color", "Setting Light Green color");
              return lv_color_hex(0x90EE90);  // Light green
            } else {
              ESP_LOGD("weather_color", "Setting White color (default)");
              return lv_color_hex(0xFFFFFF);  // White (default)
            }

number:
  - platform: template
    name: SEN55 Temperature Offset
    id: sen55_temperature_offset
    restore_value: true
    initial_value: 6.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
  - platform: template
    name: SEN55 Humidity Offset
    id: sen55_humidity_offset
    restore_value: true
    initial_value: 0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "%"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
  - platform: template
    name: "Weather Gauge Value"
    id: weather_gauge_value
    min_value: 0
    max_value: 100
    step: 1
    mode: box
    optimistic: true
    entity_category: config
    icon: mdi:gauge
    unit_of_measurement: "%"
    on_value:
      then:
        - lvgl.indicator.update:
            id: weather_temp_needle
            value: !lambda 'return (int)x;'

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: wireguard
    wireguard_id: wg0
    status:
      name: 'WireGuard Status'
      id: wireguard_status
  - platform: wireguard
    wireguard_id: wg0
    enabled:
      name: 'WireGuard Enabled'

sensor:
  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: wireguard
    wireguard_id: wg0
    latest_handshake:
      name: 'WireGuard Latest Handshake'
      id: wireguard_handshake

  - platform: template
    name: "Computed AQI"
    id: computed_halo_aqi
    unit_of_measurement: ""
    accuracy_decimals: 0
    device_class: "aqi"
    state_class: "measurement"
    update_interval: never  # We'll update it manually

  - platform: scd4x
    id: scd40
    co2:
      name: "CO2"
      id: "co2"
      on_value:
        then:
          - lvgl.label.update:
              id: co2_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 600;"
              then:
                - lvgl.label.update:
                    id: co2_value
                    text_color: my_green                     
              else:
                - if:
                    condition:
                      lambda: "return x <= 1000;"
                    then:
                      - lvgl.label.update:
                          id: co2_value
                          text_color: my_yellow                         
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 1500;"
                          then:
                            - lvgl.label.update:
                                id: co2_value
                                text_color: my_orange                                 
                          else:
                            - lvgl.label.update:
                                id: co2_value
                                text_color: my_red                                                                              
    automatic_self_calibration: false
    update_interval: 10s
    measurement_mode: "periodic"
    i2c_id: lily_i2c
    ambient_pressure_compensation_source: bme280pressure

  - platform: mics_4514
    id: mics4514
    nitrogen_dioxide:
      name: Nitrogen Dioxide
      id: "no2"
      filters:
      - offset: -0.16
      on_value:
        then:
          - lvgl.label.update:
              id: no2_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.03;"  # Safe level typical indoors (ppm)
              then:
                - lvgl.label.update:
                    id: no2_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 0.06;"  # Slightly elevated level (ppm)
                    then:
                      - lvgl.label.update:
                          id: no2_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 0.1;"  # Moderately high level (ppm)
                          then:
                            - lvgl.label.update:
                                id: no2_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: no2_value
                                text_color: my_red  # High level, unsafe indoors (ppm)                          
    carbon_monoxide:
      name: Carbon Monoxide
      id: "co"
      on_value:
        then:
          - lvgl.label.update:
              id: co_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 15;"
              then:
                - lvgl.label.update:
                    id: co_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 30;"
                    then:
                      - lvgl.label.update:
                          id: co_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 36;"
                          then:
                            - lvgl.label.update:
                                id: co_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: co_value
                                text_color: my_red                      
    hydrogen:
      name: Hydrogen
      id: "h2"
      on_value:
        then:
          - lvgl.label.update:
              id: h2_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.4;"  # Safe level typical indoors
              then:
                - lvgl.label.update:
                    id: h2_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 1.0;"  # Slightly elevated level
                    then:
                      - lvgl.label.update:
                          id: h2_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 2.0;"  # Moderately high level
                          then:
                            - lvgl.label.update:
                                id: h2_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: h2_value
                                text_color: my_red  # High level, unsafe indoors                       
    methane:
      name: Methane
      id: "ch4"
      on_value:
        then:
          - lvgl.label.update:
              id: ch4_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 2.0;"  # Typical safe level
              then:
                - lvgl.label.update:
                    id: ch4_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 10.0;"  # Elevated but not critical
                    then:
                      - lvgl.label.update:
                          id: ch4_value
                          text_color: my_yellow
                    else:
                      - lvgl.label.update:
                          id: ch4_value
                          text_color: my_red  # Critical level                                        
    ethanol:
      name: Ethanol
      id: "ethanol"
      on_value:
        then:
          - lvgl.label.update:
              id: ethanol_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.5;"  # Safe level
              then:
                - lvgl.label.update:
                    id: ethanol_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 1.5;"  # Slightly elevated
                    then:
                      - lvgl.label.update:
                          id: ethanol_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 3.0;"  # Moderate level
                          then:
                            - lvgl.label.update:
                                id: ethanol_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: ethanol_value
                                text_color: my_red  # High level                       
    ammonia:
      name: Ammonia
      id: "nh3"
      on_value:
        then:
          - lvgl.label.update:
              id: nh3_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.5;"  # Safe level typical indoors
              then:
                - lvgl.label.update:
                    id: nh3_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 1.0;"  # Slightly elevated level
                    then:
                      - lvgl.label.update:
                          id: nh3_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 2.0;"  # Moderately high level
                          then:
                            - lvgl.label.update:
                                id: nh3_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: nh3_value
                                text_color: my_red  # High level, unsafe indoors                            
    update_interval: 10s
    i2c_id: lily_i2c
    address: 0x75

  - platform: bme280_i2c
    i2c_id: lily_i2c
    temperature:
      name: "BME280 Temperature"
      oversampling: 2x
      # filters:
      #   - lambda: |-
      #       return x;  
    pressure:
      name: "BME280 Pressure"
      id: bme280pressure
    humidity:
      name: "BME280 Humidity"    

  - platform: sen5x
    id: sen55
    pm_1_0:
      name: "PM <1µm Weight concentration"
      id: pm_1_0
      accuracy_decimals: 1
      on_value:
        then:
          - lvgl.label.update:
              id: pm1_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;          
    pm_2_5:
      name: "PM <2.5µm Weight concentration"
      id: pm_2_5
      accuracy_decimals: 1
      on_value:
        then:
          - lvgl.label.update:
              id: pm25_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;
          - lvgl.label.update:
              id: aqi_value
              text: !lambda |-
                float val = x; // PM2.5 value
                float aqi = 0.0;

                if (val <= 9.0) {
                  aqi = ((50.0 - 0.0) / (9.0 - 0.0)) * (val - 0.0) + 0.0;
                } else if (val <= 35.4) {
                  aqi = ((100.0 - 51.0) / (35.4 - 9.1)) * (val - 9.1) + 51.0;
                } else if (val <= 55.4) {
                  aqi = ((150.0 - 101.0) / (55.4 - 35.5)) * (val - 35.5) + 101.0;
                } else if (val <= 125.4) {
                  aqi = ((200.0 - 151.0) / (125.4 - 55.5)) * (val - 55.5) + 151.0;
                } else if (val <= 225.4) {
                  aqi = ((300.0 - 201.0) / (225.4 - 125.5)) * (val - 125.5) + 201.0;
                } else if (val <= 500.4) {
                  aqi = ((500.0 - 301.0) / (500.4 - 250.5)) * (val - 250.5) + 301.0;
                } else {
                  return "EVAC";
                }

                static char buffer[10];
                snprintf(buffer, sizeof(buffer), " %d", (int)aqi);
                return buffer;

          - lvgl.widget.update:
              id: aqi_widget
              bg_color: !lambda |-
                float val = x; // PM2.5 value
                float aqi = 0.0;

                if (val <= 9.0) {
                  aqi = ((50.0 - 0.0) / (9.0 - 0.0)) * (val - 0.0) + 0.0;
                } else if (val <= 35.4) {
                  aqi = ((100.0 - 51.0) / (35.4 - 9.1)) * (val - 9.1) + 51.0;
                } else if (val <= 55.4) {
                  aqi = ((150.0 - 101.0) / (55.4 - 35.5)) * (val - 35.5) + 101.0;
                } else if (val <= 125.4) {
                  aqi = ((200.0 - 151.0) / (125.4 - 55.5)) * (val - 55.5) + 151.0;
                } else if (val <= 225.4) {
                  aqi = ((300.0 - 201.0) / (225.4 - 125.5)) * (val - 125.5) + 201.0;
                } else if (val <= 500.4) {
                  aqi = ((500.0 - 301.0) / (500.4 - 250.5)) * (val - 250.5) + 301.0;
                } else {
                  aqi = 500.0;
                }
                id(computed_halo_aqi).publish_state((int)aqi);

                // Return color based on AQI
                if (aqi <= 50) {
                  return lv_color_hex(0x76fa76); // Green
                } else if (aqi <= 100) {
                  return lv_color_hex(0xFFFF00); // Yellow
                } else if (aqi <= 150) {
                  return lv_color_hex(0xFFA500); // Orange
                } else if (aqi <= 200) {
                  return lv_color_hex(0xFF0000); // Red
                } else if (aqi <= 300) {
                  return lv_color_hex(0x800080); // Purple
                } else {
                  return lv_color_hex(0x800000); // Maroon
                }        

    pm_4_0:
      name: "PM <4µm Weight concentration"
      id: pm_4_0
      accuracy_decimals: 1
      on_value:
        then:
          - lvgl.label.update:
              id: pm4_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;       
    pm_10_0:
      name: "PM <10µm Weight concentration"
      id: pm_10_0
      accuracy_decimals: 1
      on_value:
        then:
          - lvgl.label.update:
              id: pm10_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;       
    temperature:
      name: "SEN55 Temperature"
      accuracy_decimals: 1
      filters:
        - offset: !lambda return -1.0 * id(sen55_temperature_offset).state;
      on_value:
        then:
          - if:
              condition:
                lambda: "return temp_unit_changed;"
              then:
                - lvgl.label.update:
                    id: temperature_units
                    text: !lambda |-
                      if(id(display_temperature_unit).state == "Fahrenheit")
                        return "\u00B0F";
                      else if(id(display_temperature_unit).state == "Kelvin")
                        return "K";
                      return "\u00B0C";
                - globals.set:
                    id: temp_unit_changed
                    value: "false"
          - lvgl.label.update:
              id: temperature_value
              text: !lambda |-
                static char buffer[10];
                if(id(display_temperature_unit).state == "Fahrenheit")
                  snprintf(buffer, sizeof(buffer), "%.01f", (x * 9.0 / 5.0) + 32.0);
                else if(id(display_temperature_unit).state == "Kelvin")
                  snprintf(buffer, sizeof(buffer), "%.01f", x + 273.15);
                else
                  snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x >= 18 && x <= 24;"  # Comfortable temperature range (°C)
              then:
                - lvgl.label.update:
                    id: temperature_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return (x > 24 && x <= 27) || (x >= 16 && x < 18);"  # Slightly uncomfortable (°C)
                    then:
                      - lvgl.label.update:
                          id: temperature_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return (x > 27 && x <= 30) || (x >= 10 && x < 16);"  # Moderately uncomfortable (°C)
                          then:
                            - lvgl.label.update:
                                id: temperature_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: temperature_value
                                text_color: my_red  # Extreme discomfort or unsafe (°C)
    humidity:
      name: "SEN55 Humidity"
      filters:
        - lambda: return x - id(sen55_humidity_offset).state;
      accuracy_decimals: 0
      on_value:
        then:
          - lvgl.label.update:
              id: rh_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x >= 30 && x <= 50;"  # Optimal indoor comfort range (%)
              then:
                - lvgl.label.update:
                    id: rh_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return (x > 50 && x <= 60) || (x >= 20 && x < 30);"  # Slightly out of comfort range (%)
                    then:
                      - lvgl.label.update:
                          id: rh_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return (x > 60 && x <= 70) || (x >= 10 && x < 20);"  # Moderately uncomfortable (%)
                          then:
                            - lvgl.label.update:
                                id: rh_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: rh_value
                                text_color: my_red  # Very uncomfortable or potentially hazardous (%)                             
    voc:
      name: "SEN55 VOC"
      id: sen55_voc
      algorithm_tuning:
        #https://sensirion.com/media/documents/25AB572C/62B463AA/Sensirion_Engineering_Guidelines_SEN5x.pdf
        index_offset: 100
        learning_time_offset_hours: 72
        learning_time_gain_hours: 72
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
      on_value:
        then:
          - lvgl.label.update:
              id: voc_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%3d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x < 150;"
              then:
                - lvgl.label.update:
                    id: voc_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 250;"
                    then:
                      - lvgl.label.update:
                          id: voc_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 400;"
                          then:
                            - lvgl.label.update:
                                id: voc_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: voc_value
                                text_color: my_red                      
    i2c_id: lily_i2c
    address: 0x69
    update_interval: 10s    

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

  - platform: template
    name: "Calibrate SCD40 To 420ppm"
    id: set_SCD40_calibrate
    on_press:
      - scd4x.perform_forced_calibration:
          value: 420
          id: scd40

  - platform: template
    name: "Clean SEN55"
    id: clean_sen55
    on_press:
      - sen5x.start_fan_autoclean: sen55

text_sensor:
  - platform: wireguard
    wireguard_id: wg0
    address:
      name: "WireGuard Address"
      id: wireguard_address_text

    # Convert VOC Index To Text: 
    # https://sensirion.com/media/documents/02232963/6294E043/Info_Note_VOC_Index.pdf
    # https://sensirion.com/media/documents/ACD82D45/6294DFC0/Info_Note_Integration_VOC_NOx_Sensor.pdf
  - platform: template
    name: "VOC Quality"
    id: voc_quality
    icon: mdi:air-filter
    lambda: |-
      if (id(sen55_voc).state < 80) {
        return std::string("Improved");}
      else if (id(sen55_voc).state < 150) {
        return std::string("Normal");}
      else if (id(sen55_voc).state < 250) {
        return std::string("Abnormal");}
      else if (id(sen55_voc).state < 400) {
        return std::string("Very abnormal");}
      else {
        return std::string("Extremely abnormal");}

font:
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icons_100
    size: 100
    bpp: 4
    glyphs: [
      "\U000F0594", # clear-night
      "\U000F0590", # cloudy
      "\U000F0F2F", # exceptional
      "\U000F0591", # fog
      "\U000F0592", # hail
      "\U000F0593", # lightning
      "\U000F067E", # lightning-rainy
      "\U000F0595", # partlycloudy
      "\U000F0596", # pouring
      "\U000F0597", # rainy
      "\U000F0598", # snowy
      "\U000F067F", # snowy-rainy
      "\U000F0599", # sunny
      "\U000F059D", # windy
      "\U000F059E", # windy-variant
      "\U000F14E4", # sunny-off
      ]    

light:
  # - platform: esp32_rmt_led_strip
  #   id: rgb_light
  #   name: "Halo"
  #   pin: GPIO47
  #   rgb_order: GRB
  #   default_transition_length: 2s
  #   chipset: SK6812
  #   num_leds: 11
  #   effects:
  #     - pulse:
  #         name: "Slow Pulse" 
  #         transition_length: 500ms
  #         update_interval: 500ms
  #         min_brightness: 10%
  #         max_brightness: 50%
  #     - addressable_rainbow:
  #         name: Rainbow Effect With Custom Values
  #         speed: 10
  #         width: 50

  - platform: esp32_rmt_led_strip
    name: Halo
    id: rgb_light
    rgb_order: GRB
    pin: GPIO47
    num_leds: 12
    chipset: WS2812
    restore_mode: ALWAYS_OFF
    effects:
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 50
      - addressable_rainbow:
          name: Addressable Rainbow
      - addressable_color_wipe:
          name: Color Wipe
      - addressable_scan:
          name: Scan
      - addressable_twinkle:
          name: Twinkle
      - addressable_fireworks:
          name: Fireworks
      - strobe:
          name: Strobe
      - addressable_random_twinkle:
          name: Random Twinkle

  - platform: monochromatic
    output: backlight
    name: "Display Backlight"
    id: display_backlight
    restore_mode: ALWAYS_ON
    on_turn_on:
      - logger.log: "Display backlight turned ON"
    on_turn_off:
      - logger.log: "Display backlight turned OFF"

lvgl:
  displays:
    - lily_display
  touchscreens:
    - lily_touch
  buffer_size: 100%
  disp_bg_color: 0x000000
  disp_bg_opa: COVER
  disp_bg_image: none
  log_level: DEBUG
  on_idle:
    timeout: 60s
    then:
      - logger.log: "LVGL: Display idle for 60 seconds"
  gradients:
    - id: wifi_signal_gradient
      direction: hor
      dither: none
      stops:
        - color: 0xFF0000  # Red - weak signal
          position: 0
        - color: 0xFF8000  # Orange
          position: 64
        - color: 0xFFFF00  # Yellow
          position: 128
        - color: 0x80FF00  # Yellow-green
          position: 192
        - color: 0x00FF00  # Green - strong signal
          position: 255
  pages:
    - id: main_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      on_load:
        - logger.log: "LVGL: Main page loaded and displayed"
      widgets:
        - image:
            id: ym_image          
            src: ym_logo
            align: CENTER
            x: 80
            y: -309
        - label: 
            id: timeVal
            align: LEFT_MID
            text_font: montserrat_18
            text_color: my_white
            x: 2
            y: -309
            text: "00:00AM"
        - label: 
            id: wifi_stat
            align: CENTER
            text_font: montserrat_18
            text_color: my_gray
            x: 42
            y: -309
            text: "\uF1EB"
        - obj: 
            id: aqi_widget
            align: TOP_MID
            x: 0
            y: 24
            width: 180
            height: 42
            bg_color: 7797366
            border_width: 0
            widgets:
              - label: 
                  id: aqi_label
                  align: LEFT_MID
                  text_font: montserrat_28
                  text_color: my_black
                  long_mode: WRAP
                  x: 2
                  y: 0
                  text: "AQI:"
              - label: 
                  id: aqi_value
                  align: LEFT_MID
                  text_font: montserrat_28
                  text_color: my_black
                  long_mode: WRAP
                  x: 90
                  y: 0
                  text: 000
        - label: 
            id: temperature_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 70
            text: "TEMP:"
        - label: 
            id: temperature_value
            align: TOP_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: 0
            y: 70
            text: 000.0
        - label: 
            id: temperature_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -8
            y: 70
            text: °F
        - line: 
            points: 
              - 0, 106
              - 180, 106
            line_width: 1
            line_color: 57343
        - label: 
            id: co2_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 111
            text: "CO2:"
        - label: 
            id: co2_value
            align: TOP_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: 0
            y: 111
            text: 0000
        - label: 
            id: co2_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 111
            text: PPM
        - line: 
            points: 
              - 0, 147
              - 180, 147
            line_width: 1
            line_color: 57343
        - label: 
            id: pm1_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 152
            text: "PM1:"
        - label: 
            id: pm1_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 152
            text: 000.0
        - label: 
            id: pm1_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 152
            text: ug/m3
        - line: 
            points: 
              - 0, 188
              - 180, 188
            line_width: 1
            line_color: 57343
        - label: 
            id: pm25_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 193
            text: "PM2.5:"
        - label: 
            id: pm25_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 193
            text: 000.0
        - label: 
            id: pm25_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 193
            text: ug/m3
        - line: 
            points: 
              - 0, 229
              - 180, 229
            line_width: 1
            line_color: 57343
        - label: 
            id: pm4_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 234
            text: "PM4:"
        - label: 
            id: pm4_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 234
            text: 000.0
        - label: 
            id: pm4_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 234
            text: ug/m3
        - line: 
            points: 
              - 0, 270
              - 180, 270
            line_width: 1
            line_color: 57343
        - label: 
            id: pm10_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 275
            text: "PM10:"
        - label: 
            id: pm10_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 275
            text: 000.0
        - label: 
            id: pm10_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 275
            text: ug/m3
        - line: 
            points: 
              - 0, 311
              - 180, 311
            line_width: 1
            line_color: 57343
        - label: 
            id: voc_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 316
            text: "VOC:"
        - label: 
            id: voc_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 316
            text: 000.0
        - label: 
            id: voc_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 316
            text: IDX
        - line: 
            points: 
              - 0, 352
              - 180, 352
            line_width: 1
            line_color: 57343
        - label: 
            id: co_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 357
            text: "CO:"
        - label: 
            id: co_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 357
            text: 000.0
        - label: 
            id: co_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 357
            text: PPM
        - line: 
            points: 
              - 0, 393
              - 180, 393
            line_width: 1
            line_color: 57343
        - label: 
            id: ethanol_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: SCROLL
            width: 40
            x: 2
            y: 398
            text: "C2H5OH:"
        - label: 
            id: ethanol_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 398
            text: 000.0
        - label: 
            id: ethanol_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 398
            text: PPM
        - line: 
            points: 
              - 0, 434
              - 180, 434
            line_width: 1
            line_color: 57343
        - label: 
            id: h2_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 439
            text: "H2:"
        - label: 
            id: h2_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 439
            text: 000.0
        - label: 
            id: h2_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 439
            text: PPM
        - line: 
            points: 
              - 0, 475
              - 180, 475
            line_width: 1
            line_color: 57343
        - label: 
            id: no2_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 480
            text: "NO2:"
        - label: 
            id: no2_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 480
            text: 000.0
        - label: 
            id: no2_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 480
            text: PPM
        - line: 
            points: 
              - 0, 516
              - 180, 516
            line_width: 1
            line_color: 57343
        - label: 
            id: nh3_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 521
            text: "NH3:"
        - label:
            id: nh3_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 521
            text: "000.0" 
        - label:
            id: nh3_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 521
            text: "PPM"                     
        - line:
            points:
              - 0, 557
              - 180, 557
            line_width: 1
            line_color: 0x00dfff
        - label:
            id: ch4_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 562
            text: "CH4:"              
        - label:
            id: ch4_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 562
            text: "000.0" 
        - label:
            id: ch4_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 562
            text: "PPM"                     
        - line:
            points:
              - 0, 598
              - 180, 598
            line_width: 1
            line_color: 0x00dfff
        - label:
            id: rh_label
            align: TOP_LEFT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 603
            text: "RH:"              
        - label:
            id: rh_value
            align: TOP_RIGHT
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 603
            text: "000.0" 
        - label:
            id: rh_units
            align: TOP_RIGHT
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 603
            text: "%"
    - id: wifi_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      on_load:
        - logger.log: "LVGL: WiFi/VPN page loaded and displayed"
      widgets:
        - label:
            text: "WiFi & VPN \nStatistics"
            align: CENTER
            x: 0
            y: -300
            text_font: montserrat_20
            text_color: my_white
            text_align: CENTER
        - label:
            id: wifi_ssid_label
            text: "SSID: ...\n"
            align: LEFT_MID
            x: 10
            y: -250
            text_font: montserrat_18
            text_color: my_white
        - label:
            id: wifi_signal_label
            text: "Signal: ..."
            align: LEFT_MID
            x: 10
            y: -230
            text_font: montserrat_18
            text_color: my_white
        - bar:
            id: wifi_signal_bar
            align: CENTER
            x: 0
            y: -200
            width: 160
            height: 10
            min_value: -100
            max_value: -30
            value: -100
            bg_color: my_gray
            indicator:
              bg_grad: wifi_signal_gradient
        
        - label:
            id: wifi_ip_label
            text: "IP: ..."
            align: LEFT_MID
            x: 10
            y: -175
            text_font: montserrat_18
            text_color: my_white
        - label:
            text: "WireGuard"
            align: CENTER
            x: 0
            y: -100
            text_font: montserrat_20
            text_color: my_teal
        - label:
            id: wg_status_label
            text: "Status: Disabled"
            align: LEFT_MID
            x: 10
            y: -50
            text_font: montserrat_18
            text_color: my_gray
        - label:
            id: wg_address_label
            text: "VPN IP: ..."
            align: LEFT_MID
            x: 10
            y: 0
            text_font: montserrat_18
            text_color: my_white
        - label:
            id: wg_endpoint_label
            text: "Endpoint: ..."
            align: LEFT_MID
            x: 10
            y: 50
            text_font: montserrat_18
            text_color: my_white
        - label:
            id: wg_handshake_label
            text: "Last Handshake: ..."
            align: LEFT_MID
            x: 10
            y: 125
            text_font: montserrat_18
            text_color: my_white
            text_align: LEFT
    - id: weather_forecast_page
      bg_color: 0x000000
      bg_opa: COVER
      scrollbar_mode: "OFF"
      on_load:
        - logger.log: "LVGL: Weather forecast page loaded and displayed"
      widgets:
        # Large weather condition icon at top
        - label:
            text: "\U000F14E4"
            id: lbl_weather_forecast_condition_icon
            text_font: icons_100
            text_align: CENTER
            text_color: my_white
            align: TOP_MID
            x: 0
            y: 10

        # Condition name below icon
        - label:
            text: "Unknown"
            id: lbl_weather_forecast_condition_name
            text_align: CENTER
            text_font: montserrat_20
            text_color: my_white
            align: TOP_MID
            x: 0
            y: 120

        # Semicircle meter gauge for apparent temperature
        - obj:
            align: CENTER
            x: 0
            y: 100
            width: 180
            height: 180
            bg_color: 0x000000
            border_width: 0
            pad_all: 10
            widgets:
              - meter:
                  id: weather_temp_gauge
                  height: 100%
                  width: 100%
                  border_width: 0
                  align: CENTER
                  bg_opa: TRANSP
                  scales:
                    - range_from: 0
                      range_to: 100
                      angle_range: 180
                      rotation: 180
                      ticks:
                        count: 51
                        width: 2
                        length: 10
                        color: 0x404040
                      indicators:
                        - tick_style:
                            start_value: 0
                            end_value: 100
                            color_start: 0x0099FF
                            color_end: 0xFF6600
                    - range_from: 0
                      range_to: 100
                      angle_range: 180
                      rotation: 180
                      ticks:
                        count: 0
                      indicators:
                        - line:
                            id: weather_temp_needle
                            width: 8
                            r_mod: 2
                            value: 50
                            color: 0xFF0000
              - obj:
                  height: 100
                  width: 100
                  radius: 50
                  align: CENTER
                  border_width: 0
                  bg_color: 0x000000

        # Current apparent temperature in center of gauge
        - label:
            text: "--°"
            id: lbl_weather_forecast_tempap
            text_align: CENTER
            text_font: montserrat_28
            text_color: my_white
            align: CENTER
            x: 0
            y: 120

        # "Feels Like" label above temp
        - label:
            text: "Feels Like"
            text_align: CENTER
            text_font: montserrat_14
            text_color: my_gray
            align: CENTER
            x: 0
            y: 95

        # Low temp stacked above gauge
        - label:
            text: "L: --°"
            id: lbl_weather_forecast_templo
            text_align: CENTER
            text_font: montserrat_28
            text_color: my_teal
            align: CENTER
            x: 0
            y: -35

        # High temp stacked above low temp
        - label:
            text: "H: --°"
            id: lbl_weather_forecast_temphi
            text_align: CENTER
            text_font: montserrat_28
            text_color: my_red
            align: CENTER
            x: 0
            y: -70

        # Today precipitation ant
        - label:
            text: "Amt Today: --mm"
            id: lbl_weather_forecast_hrprecip
            text_align: CENTER
            text_font: montserrat_18
            text_color: my_teal
            align: BOTTOM_MID
            x: 0
            y: -80

        # Precipitation Chnace
        - label:
            text: "Chance: --%"
            id: lbl_weather_forecast_dailyprecip
            text_align: CENTER
            text_font: montserrat_18
            text_color: my_teal
            align: BOTTOM_MID
            x: 0
            y: -55

        # Current temperature at bottom
        - label:
            text: "Now:"
            text_align: CENTER
            text_font: montserrat_14
            text_color: my_gray
            align: BOTTOM_MID
            x: 0
            y: -30

        - label:
            text: "--.- °C"
            id: lbl_weather_outdnoor_now
            text_align: CENTER
            text_font: montserrat_20
            text_color: my_white
            align: BOTTOM_MID
            x: 0
            y: -5
text:
  - platform: lvgl
    name: fr_cond_icon
    widget: lbl_weather_forecast_condition_icon
    mode: text
  - platform: lvgl
    name: fr_cond_name
    id: fr_cond_name
    widget: lbl_weather_forecast_condition_name
    mode: text
    on_value:
      then:
        - script.execute: update_weather_icon_color
  - platform: lvgl
    name: fr_tempap
    widget: lbl_weather_forecast_tempap
    mode: text
  - platform: lvgl
    name: fr_temphi
    widget: lbl_weather_forecast_temphi
    mode: text
  - platform: lvgl
    name: fr_templo
    widget: lbl_weather_forecast_templo
    mode: text
  - platform: lvgl
    name: wd_out_now
    widget: lbl_weather_outdnoor_now
    mode: text
  - platform: lvgl
    name: hr_precip
    widget: lbl_weather_forecast_hrprecip
    mode: text
  - platform: lvgl
    name: dy_precip
    widget: lbl_weather_forecast_dailyprecip
    mode: text


esphome:
  name: halo-v1-79e384
  friendly_name: Halo Air Quality Sensor Dev
  name_add_mac_suffix: false
  platformio_options:
    upload_speed: 921600
    board_build.flash_mode: qio
    board_build.psram_type: opi
    board_build.f_flash: 80000000L
    board_build.f_cpu: 240000000L
  min_version: 2025.6.2
  project:
    name: "yashmulgaonkar.Halo-v1"
    version: "${version}"
  on_boot:
    priority: 900
    then:
      - logger.log: "Boot sequence starting (priority 900)"
      - light.turn_off: rgb_light
      - delay: 1s
      - logger.log:
          format: "Setting default page (index: %d)"
          args: ['id(default_page_index)']
      - if:
          condition:
            lambda: 'return id(default_page_index) == 1;'
          then:
            - logger.log: "Showing WiFi page"
            - lvgl.page.show: wifi_page
          else:
            - if:
                condition:
                  lambda: 'return id(default_page_index) == 2;'
                then:
                  - logger.log: "Showing Weather page"
                  - lvgl.page.show: weather_forecast_page
                else:
                  - logger.log: "Showing Main page"
                  - lvgl.page.show: main_page
      - logger.log: "Boot sequence complete"