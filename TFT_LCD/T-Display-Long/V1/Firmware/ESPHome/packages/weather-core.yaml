# Weather Core Package
# Provides core weather functionality including globals, scripts, and page rotation settings
#
# Usage:
#   packages:
#     weather_core: !include packages/weather-core.yaml
#
# This package provides:
#   - Weather-related global variables
#   - Weather icon color update script
#   - Page rotation settings for weather pages (weather, hourly, daily forecast)
#   - Page order controls for weather pages
#
# Dependencies:
#   - Requires page-registry package for current_page_index global
#   - Requires weather-sensors package for forecast data
#   - Requires weather-pages package for LVGL page definitions

# Weather-related globals
globals:
  # Page rotation enable/disable for weather pages
  - id: page_rotation_weather_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: page_rotation_daily_forecast_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: page_rotation_hourly_forecast_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  # Page rotation order for weather pages
  - id: page_rotation_weather_order
    type: int
    restore_value: yes
    initial_value: '3'
  - id: page_rotation_daily_forecast_order
    type: int
    restore_value: yes
    initial_value: '4'
  - id: page_rotation_hourly_forecast_order
    type: int
    restore_value: yes
    initial_value: '5'

  # Weather display state tracking
  - id: weather_last_started
    type: int
    restore_value: no
    initial_value: '0'
  - id: weather_last_duration
    type: int
    restore_value: no
    initial_value: '0'
  - id: weather_last_condition
    type: std::string
    restore_value: no
    initial_value: ""
  - id: weather_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'

# Weather icon color update script
script:
  - id: update_weather_icon_color
    mode: restart
    then:
      - lambda: |-
          id(weather_last_started) = millis();
          id(weather_needs_render) = false;
      - lambda: |-
          std::string condition = id(forecast_day1_condition).state;
          ESP_LOGD("weather_color", "Current condition: '%s'", condition.c_str());
          if (condition.empty()) {
            return;
          }
          std::string normalized = condition;
          std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);
          if (normalized != id(weather_last_condition)) {
            id(weather_last_condition) = normalized;
            id(weather_needs_render) = true;
          }
      - if:
          condition:
            lambda: 'return id(weather_needs_render);'
          then:
            - lvgl.label.update:
                id: lbl_weather_forecast_condition_icon
                text_color: !lambda |-
                  const std::string condition = id(weather_last_condition);
                  ESP_LOGD("weather_color", "Applying color for condition: '%s'", condition.c_str());
                  if (condition.find("clear-night") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Slate Blue color (night)");
                    return lv_color_hex(0x6A5ACD);
                  } else if (condition.find("sunny") != std::string::npos || condition.find("clear") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Gold color");
                    return lv_color_hex(0xFFD700);
                  } else if (condition.find("snowy-rainy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Light Cyan color (mixed precipitation)");
                    return lv_color_hex(0xAFEEEE);
                  } else if (condition.find("lightning-rainy") != std::string::npos || condition.find("lightning") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Deep Pink color");
                    return lv_color_hex(0xFF1493);
                  } else if (condition.find("partlycloudy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Light Sky Blue color");
                    return lv_color_hex(0x87CEFA);
                  } else if (condition.find("cloudy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Dark Gray color");
                    return lv_color_hex(0xA9A9A9);
                  } else if (condition.find("rainy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Royal Blue color");
                    return lv_color_hex(0x4169E1);
                  } else if (condition.find("snowy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Gainsboro color");
                    return lv_color_hex(0xDCDCDC);
                  } else if (condition.find("fog") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Light Steel Blue color");
                    return lv_color_hex(0xB0C4DE);
                  } else if (condition.find("windy") != std::string::npos) {
                    ESP_LOGD("weather_color", "Setting Light Green color");
                    return lv_color_hex(0x90EE90);
                  } else {
                    ESP_LOGD("weather_color", "Setting White color (default)");
                    return lv_color_hex(0xFFFFFF);
                  }
      - lambda: |-
          const uint32_t elapsed = millis() - id(weather_last_started);
          id(weather_last_duration) = elapsed;
          const bool rendered = id(weather_needs_render);
          if (elapsed > 80) {
            ESP_LOGW("weather_color", "update_weather_icon_color took %u ms (rendered=%s)", elapsed, rendered ? "true" : "false");
          } else {
            ESP_LOGD("weather_color", "update_weather_icon_color took %u ms (rendered=%s)", elapsed, rendered ? "true" : "false");
          }
          id(weather_needs_render) = false;

# Weather page rotation controls
switch:
  - platform: template
    name: "Page Rotation: Weather Page"
    id: page_rotation_weather_switch
    icon: mdi:weather-partly-cloudy
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - lambda: 'id(page_rotation_weather_enabled) = true;'
      - logger.log: "Weather page enabled in rotation"
    on_turn_off:
      - lambda: 'id(page_rotation_weather_enabled) = false;'
      - logger.log: "Weather page disabled in rotation"

  - platform: template
    name: "Page Rotation: Daily Forecast Page"
    id: page_rotation_daily_forecast_switch
    icon: mdi:calendar-today
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - lambda: 'id(page_rotation_daily_forecast_enabled) = true;'
      - logger.log: "Daily forecast page enabled in rotation"
    on_turn_off:
      - lambda: 'id(page_rotation_daily_forecast_enabled) = false;'
      - logger.log: "Daily forecast page disabled in rotation"

  - platform: template
    name: "Page Rotation: Hourly Forecast Page"
    id: page_rotation_hourly_forecast_switch
    icon: mdi:clock-time-eight-outline
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      - lambda: 'id(page_rotation_hourly_forecast_enabled) = true;'
      - logger.log: "Hourly forecast page enabled in rotation"
    on_turn_off:
      - lambda: 'id(page_rotation_hourly_forecast_enabled) = false;'
      - logger.log: "Hourly forecast page disabled in rotation"

# Weather page order controls
number:
  - platform: template
    name: "Page Order: Weather Page"
    id: page_order_weather
    icon: mdi:numeric
    restore_value: true
    initial_value: 3
    min_value: 1
    max_value: 6
    entity_category: "config"
    optimistic: true
    step: 1
    mode: box
    on_value:
      - lambda: 'id(page_rotation_weather_order) = (int)x;'
      - logger.log:
          format: "Weather page order set to %d"
          args: ['(int)x']

  - platform: template
    name: "Page Order: Daily Forecast Page"
    id: page_order_daily_forecast
    icon: mdi:numeric
    restore_value: true
    initial_value: 4
    min_value: 1
    max_value: 6
    entity_category: "config"
    optimistic: true
    step: 1
    mode: box
    on_value:
      - lambda: 'id(page_rotation_daily_forecast_order) = (int)x;'
      - logger.log:
          format: "Daily forecast page order set to %d"
          args: ['(int)x']

  - platform: template
    name: "Page Order: Hourly Forecast Page"
    id: page_order_hourly_forecast
    icon: mdi:numeric
    restore_value: true
    initial_value: 5
    min_value: 1
    max_value: 6
    entity_category: "config"
    optimistic: true
    step: 1
    mode: box
    on_value:
      - lambda: 'id(page_rotation_hourly_forecast_order) = (int)x;'
      - logger.log:
          format: "Hourly forecast page order set to %d"
          args: ['(int)x']

# Weather gauge control (for weather page needle)
  - platform: template
    name: "Weather Gauge Value"
    id: weather_gauge_value
    min_value: 0
    max_value: 100
    step: 1
    mode: box
    optimistic: true
    entity_category: config
    icon: mdi:gauge
    unit_of_measurement: "%"
    on_value:
      - lvgl.indicator.update:
          id: weather_temp_needle
          value: !lambda 'return (int)x;'

# Weather diagnostic sensor
sensor:
  - platform: template
    name: "Weather Icon Update Duration"
    id: weather_icon_duration_sensor
    internal: true  # Don't send to Home Assistant - internal diagnostic only
    unit_of_measurement: "ms"
    accuracy_decimals: 0
    icon: "mdi:weather-lightning"
    entity_category: "diagnostic"
    update_interval: never
