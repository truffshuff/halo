# Memory Statistics Package
# Provides comprehensive memory monitoring for ESP32 devices
#
# Usage:
#   packages:
#     memory_stats: !include packages/memory-stats.yaml
#
# This package provides:
#   - Internal heap monitoring (Free, Largest Block, Fragmentation)
#   - DMA-capable memory monitoring
#   - PSRAM monitoring (if available)
#   - Total free heap across all memory types
#   - Minimum free heap since boot (worst-case memory pressure indicator)
#
# All sensors are marked as diagnostic entities for Home Assistant

sensor:
  # Internal heap monitoring
  - platform: template
    name: "Free Heap"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
    unit_of_measurement: "bytes"
    update_interval: 7s
    entity_category: "diagnostic"

  - platform: template
    name: "Largest Free Block"
    lambda: return heap_caps_get_largest_free_block(MALLOC_CAP_INTERNAL);
    unit_of_measurement: "bytes"
    update_interval: 7s
    entity_category: "diagnostic"

  - platform: template
    name: "Heap Fragmentation"
    lambda: |-
      size_t free_heap = heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
      size_t largest_block = heap_caps_get_largest_free_block(MALLOC_CAP_INTERNAL);
      if (free_heap > 0) {
        return ((float)(free_heap - largest_block) / free_heap) * 100.0;
      }
      return 0.0;
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 7s
    entity_category: "diagnostic"

  # DMA-capable memory monitoring
  - platform: template
    name: "DMA Capable Heap Free"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_DMA);
    unit_of_measurement: "bytes"
    update_interval: 30s
    entity_category: "diagnostic"

  - platform: template
    name: "DMA Capable Largest Block"
    lambda: return heap_caps_get_largest_free_block(MALLOC_CAP_DMA);
    unit_of_measurement: "bytes"
    update_interval: 7s
    entity_category: "diagnostic"

  # PSRAM monitoring (if available)
  - platform: template
    name: "PSRAM Free"
    lambda: |-
      size_t psram_free = heap_caps_get_free_size(MALLOC_CAP_SPIRAM);
      if (psram_free > 0) {
        return psram_free;
      }
      return 0;  // No PSRAM available
    unit_of_measurement: "bytes"
    update_interval: 7s
    entity_category: "diagnostic"

  # Total free heap across all memory types
  - platform: template
    name: "Total Free Heap (All)"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_8BIT);
    unit_of_measurement: "bytes"
    update_interval: 7s
    entity_category: "diagnostic"

  # Minimum free heap since boot (indicates worst-case memory pressure)
  - platform: template
    name: "Min Free Heap Ever"
    lambda: return heap_caps_get_minimum_free_size(MALLOC_CAP_INTERNAL);
    unit_of_measurement: "bytes"
    update_interval: 7s
    entity_category: "diagnostic"
