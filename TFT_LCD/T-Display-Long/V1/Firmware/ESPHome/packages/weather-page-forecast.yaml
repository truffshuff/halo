# Weather Forecast Page (Page 3)
# Main weather display with current conditions
id: weather_forecast_page
bg_color: 0x000000
bg_opa: COVER
scrollbar_mode: "OFF"
on_load:
  - script.execute: page_transition_cleanup
  - lambda: |-
      id(current_page_index) = 3;  // weather_forecast_page
      id(weather_last_condition).clear();
      id(weather_on_weather_page) = true;
  - script.execute: fetch_weather_data
  - script.execute: update_weather_icon_color
on_unload:
  - lambda: 'id(weather_on_weather_page) = false;'
widgets:
  # Large weather condition icon at top
  - label:
      text: "\U000F14E4"
      id: lbl_weather_forecast_condition_icon
      text_font: icons_100
      text_align: CENTER
      text_color: my_white
      align: TOP_MID
      x: 0
      y: 10

  # Condition name below icon
  - label:
      id: lbl_weather_forecast_condition_name
      text: !lambda |-
        if (id(weather_current_condition).empty()) {
          return std::string("Unknown");
        }
        return id(weather_current_condition);
      text_align: CENTER
      text_font: montserrat_20
      text_color: my_white
      align: TOP_MID
      x: 0
      y: 120

  # Semicircle meter gauge for apparent temperature
  - obj:
      align: CENTER
      x: 0
      y: 100
      width: 180
      height: 180
      bg_color: 0x000000
      border_width: 0
      pad_all: 10
      widgets:
        - meter:
            id: weather_temp_gauge
            height: 100%
            width: 100%
            border_width: 0
            align: CENTER
            bg_opa: TRANSP
            scales:
              - range_from: 0
                range_to: 100
                angle_range: 180
                rotation: 180
                ticks:
                  count: 51
                  width: 2
                  length: 10
                  color: 0x404040
                indicators:
                  - tick_style:
                      start_value: 0
                      end_value: 100
                      color_start: 0x0099FF
                      color_end: 0xFF6600
              - range_from: 0
                range_to: 100
                angle_range: 180
                rotation: 180
                ticks:
                  count: 0
                indicators:
                  - line:
                      id: weather_temp_needle
                      width: 8
                      r_mod: 2
                      value: 50
                      color: 0xFF0000
        - obj:
            height: 100
            width: 100
            radius: 50
            align: CENTER
            border_width: 0
            bg_color: 0x000000

  # Current apparent temperature in center of gauge
  - label:
      id: lbl_weather_today_tempap
      text: !lambda |-
        if (isnan(id(weather_current_apparent_temp))) {
          return std::string("--°");
        }
        char buf[16];
        snprintf(buf, sizeof(buf), "%.0f°", id(weather_current_apparent_temp));
        return std::string(buf);
      text_align: CENTER
      text_font: montserrat_28
      text_color: my_white
      align: CENTER
      x: 0
      y: 120

  # "Feels Like" label above temp
  - label:
      text: "Feels Like"
      text_align: CENTER
      text_font: montserrat_14
      text_color: my_gray
      align: CENTER
      x: 0
      y: 95

  # Low temp stacked above gauge
  - label:
      id: lbl_weather_forecast_templo
      text: !lambda |-
        if (isnan(id(weather_forecast_temp_low)[0])) {
          return std::string("L: --°");
        }
        char buf[16];
        snprintf(buf, sizeof(buf), "L: %.0f°", id(weather_forecast_temp_low)[0]);
        return std::string(buf);
      text_align: CENTER
      text_font: montserrat_28
      text_color: my_teal
      align: CENTER
      x: 0
      y: -35

  # High temp stacked above low temp
  - label:
      id: lbl_weather_forecast_temphi
      text: !lambda |-
        if (isnan(id(weather_forecast_temp_high)[0])) {
          return std::string("H: --°");
        }
        char buf[16];
        snprintf(buf, sizeof(buf), "H: %.0f°", id(weather_forecast_temp_high)[0]);
        return std::string(buf);
      text_align: CENTER
      text_font: montserrat_28
      text_color: my_red
      align: CENTER
      x: 0
      y: -70

  # Precipitation Chance
  - label:
      id: lbl_weather_today_dailyprecipprob
      text: !lambda |-
        if (isnan(id(weather_forecast_precip_prob)[0])) {
          return std::string("Chance: --%");
        }
        char buf[32];
        snprintf(buf, sizeof(buf), "Chance: %.0f%%", id(weather_forecast_precip_prob)[0]);
        return std::string(buf);
      text_align: CENTER
      text_font: montserrat_18
      text_color: my_teal
      align: BOTTOM_MID
      x: 0
      y: -55

  # Current temperature at bottom
  - label:
      text: "Now:"
      text_align: CENTER
      text_font: montserrat_14
      text_color: my_gray
      align: BOTTOM_MID
      x: 0
      y: -30

  - label:
      id: lbl_weather_today_outdoor_temp
      text: !lambda |-
        if (isnan(id(weather_current_temp))) {
          return std::string("--.- °F");
        }
        char buf[16];
        snprintf(buf, sizeof(buf), "%.1f °F", id(weather_current_temp));
        return std::string(buf);
      text_align: CENTER
      text_font: montserrat_20
      text_color: my_white
      align: BOTTOM_MID
      x: 0
      y: -5
  - obj:
      id: nav_button_weather
      align: TOP_RIGHT
      x: 0
      y: 0
      width: 100
      height: 100
      bg_opa: 0
      border_width: 0
      clickable: true
      on_press:
        - logger.log: "Weather page nav button PRESSED!"
        - lambda: |-
            ESP_LOGI("touch", "Navigation button touched");
            id(last_auto_rotation_time) = millis();
            ESP_LOGD("touch", "Auto-rotation timer reset");
        - lvgl.page.next:
            animation: OUT_LEFT
            time: 300ms