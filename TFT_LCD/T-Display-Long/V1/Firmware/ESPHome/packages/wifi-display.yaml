# ============================================================================
# WiFi Display Package - Display Logic for WiFi Page
# ============================================================================
# This package provides display logic for the WiFi status page.
#
# Usage:
#   packages:
#     wifi_display: !include packages/wifi-display.yaml
#
# This package provides:
#   - Global variables for tracking WiFi display state (on WiFi page only)
#   - Optimized rendering flags to reduce unnecessary UI updates
#   - Interval-based updates for WiFi page widgets (every 5 seconds)
#
# Required LVGL widget IDs in your display configuration:
#   - ym_image: WiFi logo image (on WiFi page)
#   - wifi_signal_label: Signal strength text label
#   - wifi_signal_bar: Signal strength bar widget
#   - wifi_ssid_label: SSID text label
#   - wifi_ip_label: IP address text label
#   - ha_status_icon: Home Assistant connection status icon
#
# Note: The wifi_stat indicator on the AirQ page is handled independently
#       by airq-display.yaml, so the AirQ page works even if this package
#       is disabled.
#
# Required global variables in your main config:
#   - boot_complete: bool to track if boot is complete
#   - current_page_index: int for current page (assumes wifi_page is index 2)
#
# Required color IDs in your display configuration:
#   - my_green: Color for connected state
#   - my_red: Color for disconnected state
#
# Required sensors/binary_sensors in your main config:
#   - wifi_signal_db: WiFi RSSI sensor
#   - ink_ha_connected: Binary sensor for Home Assistant API connection status
# ============================================================================

# NOTE: LVGL gradient (wifi_signal_gradient) is defined in the WiFi page files
# (lvgl-wifi-page.yaml and lvgl-wifi-wireguard-page.yaml), not here.
# This package only provides the display update logic.

# Global variables for WiFi display state tracking (WiFi page only)
globals:
  - id: wifi_logo_visible
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wifi_signal_last_text
    type: std::string
    restore_value: no
    initial_value: ""
  - id: wifi_signal_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wifi_signal_bar_last_value
    type: float
    restore_value: no
    initial_value: '-200.0'
  - id: wifi_signal_bar_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wifi_ssid_last_text
    type: std::string
    restore_value: no
    initial_value: ""
  - id: wifi_ssid_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: wifi_ip_last_text
    type: std::string
    restore_value: no
    initial_value: ""
  - id: wifi_ip_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: ha_status_last_state
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: ha_status_needs_render
    type: bool
    restore_value: no
    initial_value: 'false'

# Interval for updating WiFi display elements
# This runs every 5 seconds to update WiFi status, signal, SSID, and IP information
# Only updates when boot is complete
interval:
  - interval: 5s
    then:
      - if:
          condition:
            lambda: 'return id(boot_complete);'
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  # Show WiFi logo on wifi_page (only if AirQ page exists)
                  # This is guarded to avoid errors in wifi-only mode
                  # - if:
                  #     condition:
                  #       lambda: 'return !id(wifi_logo_visible) && id(current_page_index) == 2;'  # wifi_page
                  #     then:
                  #       - lvgl.widget.show:
                  #           id: ym_image
                  # - if:
                  #     condition:
                  #       lambda: 'return !id(wifi_logo_visible);'
                  #     then:
                  #       - lambda: 'id(wifi_logo_visible) = true;'
                  # Update WiFi signal strength text
                  - lambda: |-
                      char buffer[32];
                      snprintf(buffer, sizeof(buffer), "Signal: %.0f dBm", id(wifi_signal_db).state);
                      std::string new_text(buffer);
                      if (new_text != id(wifi_signal_last_text)) {
                        id(wifi_signal_last_text) = new_text;
                        id(wifi_signal_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(wifi_signal_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.label.update:
                            id: wifi_signal_label
                            text: !lambda 'return id(wifi_signal_last_text);'
                        - lambda: 'id(wifi_signal_needs_render) = false;'
                  # Update WiFi signal bar
                  - lambda: |-
                      float signal = id(wifi_signal_db).state;
                      if (std::isnan(signal)) {
                        signal = -200.0f;
                      }
                      if (signal != id(wifi_signal_bar_last_value)) {
                        id(wifi_signal_bar_last_value) = signal;
                        id(wifi_signal_bar_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(wifi_signal_bar_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.bar.update:
                            id: wifi_signal_bar
                            value: !lambda 'return id(wifi_signal_bar_last_value);'
                        - lambda: 'id(wifi_signal_bar_needs_render) = false;'
                  # Update WiFi SSID
                  - lambda: |-
                      std::string ssid = esphome::wifi::global_wifi_component->wifi_ssid();
                      std::string new_text = std::string("SSID: ") + ssid;
                      if (new_text != id(wifi_ssid_last_text)) {
                        id(wifi_ssid_last_text) = new_text;
                        id(wifi_ssid_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(wifi_ssid_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.label.update:
                            id: wifi_ssid_label
                            text: !lambda 'return id(wifi_ssid_last_text);'
                        - lambda: 'id(wifi_ssid_needs_render) = false;'
                  # Update WiFi IP address
                  - lambda: |-
                      auto addresses = esphome::wifi::global_wifi_component->get_ip_addresses();
                      std::string ip_text = "IP: Not assigned";
                      if (!addresses.empty()) {
                        ip_text = std::string("IP: ") + addresses[0].str();
                      }
                      if (ip_text != id(wifi_ip_last_text)) {
                        id(wifi_ip_last_text) = ip_text;
                        id(wifi_ip_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(wifi_ip_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.label.update:
                            id: wifi_ip_label
                            text: !lambda 'return id(wifi_ip_last_text);'
                        - lambda: 'id(wifi_ip_needs_render) = false;'
                  # Update Home Assistant connection status icon
                  - lambda: |-
                      bool ha_connected = id(ink_ha_connected).state;
                      if (ha_connected != id(ha_status_last_state)) {
                        id(ha_status_last_state) = ha_connected;
                        id(ha_status_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(ha_status_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.widget.update:
                            id: ha_status_icon
                            text_color: !lambda 'return id(ink_ha_connected).state ? id(my_green) : id(my_gray);'
                        - lambda: 'id(ha_status_needs_render) = false;'
                else:
                  # WiFi disconnected - hide WiFi logo on AirQ page (only if AirQ page exists)
                  # This is guarded to avoid errors in wifi-only mode
                  # - if:
                  #     condition:
                  #       lambda: 'return id(wifi_logo_visible) && id(current_page_index) == 1;'  # AirQ_page
                  #     then:
                  #       - lvgl.widget.hide:
                  #           id: ym_image
                  # - if:
                  #     condition:
                  #       lambda: 'return id(wifi_logo_visible);'
                  #     then:
                  #       - lambda: 'id(wifi_logo_visible) = false;'
                  # Update disconnected signal text
                  - lambda: |-
                      const std::string new_text = "Signal: --";
                      if (new_text != id(wifi_signal_last_text)) {
                        id(wifi_signal_last_text) = new_text;
                        id(wifi_signal_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(wifi_signal_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.label.update:
                            id: wifi_signal_label
                            text: !lambda 'return id(wifi_signal_last_text);'
                        - lambda: 'id(wifi_signal_needs_render) = false;'
                  # Update disconnected signal bar
                  - lambda: |-
                      float new_value = -200.0f;
                      if (new_value != id(wifi_signal_bar_last_value)) {
                        id(wifi_signal_bar_last_value) = new_value;
                        id(wifi_signal_bar_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(wifi_signal_bar_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.bar.update:
                            id: wifi_signal_bar
                            value: !lambda 'return id(wifi_signal_bar_last_value);'
                        - lambda: 'id(wifi_signal_bar_needs_render) = false;'
                  # Update disconnected SSID
                  - lambda: |-
                      const std::string ssid_text = "SSID: Not connected";
                      if (ssid_text != id(wifi_ssid_last_text)) {
                        id(wifi_ssid_last_text) = ssid_text;
                        id(wifi_ssid_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(wifi_ssid_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.label.update:
                            id: wifi_ssid_label
                            text: !lambda 'return id(wifi_ssid_last_text);'
                        - lambda: 'id(wifi_ssid_needs_render) = false;'
                  # Update disconnected IP
                  - lambda: |-
                      const std::string ip_text = "IP: Not connected";
                      if (ip_text != id(wifi_ip_last_text)) {
                        id(wifi_ip_last_text) = ip_text;
                        id(wifi_ip_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(wifi_ip_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.label.update:
                            id: wifi_ip_label
                            text: !lambda 'return id(wifi_ip_last_text);'
                        - lambda: 'id(wifi_ip_needs_render) = false;'
                  # Update Home Assistant status icon (disconnected when WiFi is down)
                  - lambda: |-
                      bool ha_connected = false;  // WiFi disconnected, so HA is also disconnected
                      if (ha_connected != id(ha_status_last_state)) {
                        id(ha_status_last_state) = ha_connected;
                        id(ha_status_needs_render) = true;
                      }
                  - if:
                      condition:
                        lambda: 'return id(ha_status_needs_render) && id(current_page_index) == 2;'  # wifi_page
                      then:
                        - lvgl.widget.update:
                            id: ha_status_icon
                            text_color: !lambda 'return id(my_gray);'
                        - lambda: 'id(ha_status_needs_render) = false;'
