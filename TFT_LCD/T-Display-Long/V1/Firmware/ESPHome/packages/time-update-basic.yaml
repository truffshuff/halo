# Time Update Script - Basic Version (Home Assistant time only)
# This package provides time display update scripts for devices WITHOUT WireGuard
#
# Usage:
#   packages:
#     time_update: !include packages/time-update-basic.yaml
#
# This package provides:
#   - time_update script that uses Home Assistant time only
#   - update_colon_widget script for clock colon blinking
#   - Updates time displays on AirQ page and vertical clock page
#
# Dependencies:
#   - Requires time component: ha_time
#   - Requires LVGL widgets: timeVal, vclock_hours, vclock_minutes, vclock_ampm, vclock_date, vclock_day_top, vclock_colon
#   - Requires switch: time_format, colon_blink_enabled
#   - Requires globals: time_update_last_started, time_update_needs_render, time_update_last_text, time_update_last_duration
#   - Requires globals: colon_blink_state, current_page_index

script:
  - id: time_update
    mode: restart
    then:
      - lambda: |-
          id(time_update_last_started) = millis();
          id(time_update_needs_render) = false;
      - lambda: |-
          auto now = id(ha_time).now();
          if (!now.is_valid()) {
            ESP_LOGW("time_update", "Time source unavailable, skipping label update");
            return;
          }
          bool is_pm = now.hour >= 12;
          int hour_12 = now.hour % 12;
          if (hour_12 == 0) {
            hour_12 = 12;
          }
          char time_buf[17];
          if (id(time_format).state) {
            snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
          } else {
            snprintf(time_buf, sizeof(time_buf), "%2d:%02d%s", hour_12, now.minute, is_pm ? "PM" : "AM");
          }
          std::string new_text(time_buf);
          if (new_text != id(time_update_last_text)) {
            id(time_update_last_text) = new_text;
            id(time_update_needs_render) = true;
          }
      # AirQ page time update - commented out for wifi-only mode
      # Uncomment when AirQ is enabled
      # - if:
      #     condition:
      #       lambda: 'return id(time_update_needs_render) && id(current_page_index) == 1;'  # AirQ_page
      #     then:
      #       - lvgl.label.update:
      #           id: timeVal
      #           text: !lambda 'return id(time_update_last_text);'
      # AirQ page time update
      - if:
          condition:
            lambda: 'return id(time_update_needs_render) && id(current_page_index) == 1;'  # AirQ_page
          then:
            - lvgl.label.update:
                id: timeVal
                text: !lambda 'return id(time_update_last_text);'
      # Vertical clock page time update
      - if:
          condition:
            lambda: 'return id(time_update_needs_render) && id(current_page_index) == 0;'  # vertical_clock_page
          then:
            - lvgl.label.update:
                id: vclock_hours
                text: !lambda |-
                  auto now = id(ha_time).now();
                  if (!now.is_valid()) return std::string("--");
                  bool is_pm = now.hour >= 12;
                  int hour_12 = now.hour % 12;
                  if (hour_12 == 0) hour_12 = 12;
                  char buf[3];
                  if (id(time_format).state) {
                    snprintf(buf, sizeof(buf), "%02d", now.hour);
                  } else {
                    snprintf(buf, sizeof(buf), "%2d", hour_12);
                  }
                  return std::string(buf);
            - lvgl.label.update:
                id: vclock_minutes
                text: !lambda |-
                  auto now = id(ha_time).now();
                  if (!now.is_valid()) return std::string("--");
                  char buf[3];
                  snprintf(buf, sizeof(buf), "%02d", now.minute);
                  return std::string(buf);
            - lvgl.label.update:
                id: vclock_ampm
                text: !lambda |-
                  auto now = id(ha_time).now();
                  if (!now.is_valid()) return std::string("");
                  if (id(time_format).state) return std::string("");
                  bool is_pm = now.hour >= 12;
                  return std::string(is_pm ? "PM" : "AM");
            - lvgl.label.update:
                id: vclock_date
                text: !lambda |-
                  auto now = id(ha_time).now();
                  if (!now.is_valid()) return std::string("--");
                  static const char* months[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
                  char buf[20];
                  snprintf(buf, sizeof(buf), "%s %d", months[now.month - 1], now.day_of_month);
                  return std::string(buf);
            - lvgl.label.update:
                id: vclock_day_top
                text: !lambda |-
                  auto now = id(ha_time).now();
                  if (!now.is_valid()) return std::string("--");
                  static const char* days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
                  return std::string(days[now.day_of_week - 1]);
      - script.execute: update_colon_widget
      - lambda: |-
          const uint32_t elapsed = millis() - id(time_update_last_started);
          id(time_update_last_duration) = elapsed;
          // Removed publish_state to prevent TCP buffer overflow - store in global instead
          // id(time_update_duration_sensor).publish_state(elapsed);
          const bool rendered = id(time_update_needs_render);
          if (elapsed > 40) {
            ESP_LOGW("time_update", "time_update took %u ms (rendered=%s)", elapsed, rendered ? "true" : "false");
          } else {
            ESP_LOGD("time_update", "time_update took %u ms (rendered=%s)", elapsed, rendered ? "true" : "false");
          }
          id(time_update_needs_render) = false;

# Note: update_colon_widget script is defined in vertical-clock-core.yaml
# It should not be redefined here to avoid duplicate script errors
